@using System.Net.Http.Json
@using MudBlazor
@inject HttpClient Http
@inject IDialogService DialogService

<MudPaper Class="pa-4">
	<MudStack Spacing="2">
		<MudText Typo="Typo.h5">Customer Management</MudText>
		<MudText Typo="Typo.body2">Import customers from POSPOS into the local mapping store.</MudText>

		<MudCard Class="ma-2 pa-3">
			<MudStack Row Spacing="2">
				<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="StartImport" Disabled="_isRunning">
					@if (_isRunning)
					{
						<MudProgressCircular Size="Size.Small" Indeterminate="true" />
						<span class="ml-2">Running...</span>
					}
					else
					{
						<span>Import customers</span>
					}
				</MudButton>

				<MudSpacer />
				<MudText Typo="Typo.caption">Mapping will be persisted by default for POSPOS imports.</MudText>
			</MudStack>
		</MudCard>

		<!-- Customer Management section: move statistics here -->
		<MudPaper Class="ma-2 pa-3">
			<MudText Typo="Typo.h6">Customer Management</MudText>
            <div class="d-flex justify-end">
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="GetSummary" Disabled="_isRunning">Refresh summary</MudButton>
            </div>
			@if (_lastSummary.HasValue)
			{
				var je = _lastSummary.Value;
				string ts = je.TryGetProperty("timestamp", out var pTs) ? pTs.GetString() ?? "" : "";
				int created = je.TryGetProperty("created", out var pCreated) && pCreated.ValueKind == System.Text.Json.JsonValueKind.Number ? pCreated.GetInt32() : 0;
				int updated = je.TryGetProperty("updated", out var pUpdated) && pUpdated.ValueKind == System.Text.Json.JsonValueKind.Number ? pUpdated.GetInt32() : 0;
				int skipped = je.TryGetProperty("skipped", out var pSkipped) && pSkipped.ValueKind == System.Text.Json.JsonValueKind.Number ? pSkipped.GetInt32() : 0;

				<MudDivider Class="my-2" />
				<MudGrid>
					<MudItem xs="12" sm="6">
						<MudPaper Class="pa-2">
							<MudText Typo="Typo.subtitle2">Timestamp</MudText>
							<MudText>@ts</MudText>
						</MudPaper>
					</MudItem>
					<MudItem xs="4" sm="2">
						<MudPaper Class="pa-2 text-center">
							<MudText Typo="Typo.subtitle2">Created</MudText>
							<MudText>@created</MudText>
						</MudPaper>
					</MudItem>
					<MudItem xs="4" sm="2">
						<MudPaper Class="pa-2 text-center">
							<MudText Typo="Typo.subtitle2">Updated</MudText>
							<MudText>@updated</MudText>
						</MudPaper>
					</MudItem>
					<MudItem xs="4" sm="2">
						<MudPaper Class="pa-2 text-center">
							<MudText Typo="Typo.subtitle2">Skipped</MudText>
							<MudText>@skipped</MudText>
						</MudPaper>
					</MudItem>
				</MudGrid>

				<MudDivider Class="my-2" />
				<MudText Typo="Typo.subtitle2">Errors</MudText>
				@if (je.TryGetProperty("errors", out var pErrors) && pErrors.ValueKind == System.Text.Json.JsonValueKind.Array && pErrors.GetArrayLength() > 0)
				{
					<MudList>
						@foreach (var e in pErrors.EnumerateArray())
						{
							<MudListItem>@(e.ToString())</MudListItem>
						}
					</MudList>
				}
				else
				{
					<MudText>None</MudText>
				}
			}
			@if (!string.IsNullOrEmpty(_statusMessage))
			{
				<MudDivider Class="my-2" />
				<MudText Typo="Typo.caption">@_statusMessage</MudText>
			}
		</MudPaper>
	</MudStack>
</MudPaper>

@code {
	private bool _isRunning = false;
	private System.Text.Json.JsonElement? _lastSummary = null;
	private string _statusMessage = string.Empty;

	private async Task StartImport()
	{
		_isRunning = true;
		_statusMessage = string.Empty;
		try
		{
			var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
			var parameters = new DialogParameters();
			parameters.Add("PersistMapping", true);
			var reference = DialogService.Show<ImportCandidatesDialog>("Import from POSPOS", parameters, options);
			var result = await reference.Result;
			if (!result.Canceled && result.Data is bool ok && ok)
			{
				// Refresh summary after import
				await GetSummary();
				_statusMessage = "Import completed.";
			}
		}
		catch (Exception ex)
		{
			_statusMessage = "Import error: " + ex.Message;
		}
		finally
		{
			_isRunning = false;
			StateHasChanged();
		}
	}

	// Persist mapping is always true for POSPOS imports; the switch was removed from the UI.
	// (no field required)


	private async Task GetSummary()
	{
		try
		{
			var resp = await Http.GetAsync("/import/customers/summary");
			if (resp.IsSuccessStatusCode)
			{
				_lastSummary = await resp.Content.ReadFromJsonAsync<System.Text.Json.JsonElement?>();
				_statusMessage = "Summary loaded.";
			}
			else if (resp.StatusCode == System.Net.HttpStatusCode.NotFound)
			{
				_lastSummary = null;
				_statusMessage = "No import has been run yet.";
			}
			else
			{
				var txt = await resp.Content.ReadAsStringAsync();
				_statusMessage = $"Failed to load summary: {resp.StatusCode} - {txt}";
			}
		}
		catch (Exception ex)
		{
			_statusMessage = "Summary error: " + ex.Message;
		}
	}
}

