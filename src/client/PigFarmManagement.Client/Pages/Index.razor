@page "/"
@inject HttpClient Http
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>PigTrack Pro - Dashboard</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Pig Farm Management</MudText>

<MudPaper Class="pa-4 ma-2" Elevation="2">
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudSelect T="Guid?" @bind-Value="selectedCustomerId" Label="Filter Customer" Variant="Variant.Outlined">
                <MudSelectItem Value="@((Guid?)null)">All Customers</MudSelectItem>
                @foreach (var customer in customers)
                {
                    <MudSelectItem Value="@customer.Id">@customer.Name (@customer.Type)</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField @bind-Value="searchText" Label="Search" Variant="Variant.Outlined" 
                         Adornment="Adornment.End" AdornmentIcon="Icons.Material.Filled.Search" />
        </MudItem>
    </MudGrid>
</MudPaper>

<MudPaper Class="pa-4 ma-2" Elevation="2">
    <div class="d-flex justify-space-between align-center mb-4">
        <MudText Typo="Typo.h6">Pig Pen List</MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                   StartIcon="Icons.Material.Filled.Add" OnClick="ShowAddDialog">
            Add New Pig Pen
        </MudButton>
    </div>

    <MudTable Items="@filteredPigPens" Hover="true" Striped="true" Loading="@loading">
        <HeaderContent>
            <MudTh>Customer</MudTh>
            <MudTh>Pen Code</MudTh>
            <MudTh>Quantity</MudTh>
            <MudTh>Start Date</MudTh>
            <MudTh>Est. Harvest</MudTh>
            <MudTh>Feed Cost</MudTh>
            <MudTh>Investment</MudTh>
            <MudTh>Profit/Loss</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Customer">@GetCustomerName(context.CustomerId)</MudTd>
            <MudTd DataLabel="Pen Code">@context.PenCode</MudTd>
            <MudTd DataLabel="Quantity">@context.PigQty</MudTd>
            <MudTd DataLabel="Start Date">@context.StartDate.ToString("dd/MM/yyyy")</MudTd>
            <MudTd DataLabel="Est. Harvest">@(context.EstimatedHarvestDate?.ToString("dd/MM/yyyy") ?? "-")</MudTd>
            <MudTd DataLabel="Feed Cost">
                <MudText Color="Color.Primary">฿@(GetSummary(context.Id)?.TotalFeedCost.ToString("N0") ?? "0")</MudText>
            </MudTd>
            <MudTd DataLabel="Investment">
                <MudText Color="Color.Secondary">฿@(GetSummary(context.Id)?.Investment.ToString("N0") ?? "0")</MudText>
            </MudTd>
            <MudTd DataLabel="Profit/Loss">
                @{
                    var summary = GetSummary(context.Id);
                    var profitLoss = summary?.ProfitLoss ?? 0;
                }
                <MudText Color="@(profitLoss >= 0 ? Color.Success : Color.Error)">
                    ฿@profitLoss.ToString("N0")
                </MudText>
            </MudTd>
            <MudTd DataLabel="Actions">
                <MudButtonGroup Variant="Variant.Text" Size="Size.Small">
                    <MudButton Color="Color.Info" StartIcon="Icons.Material.Filled.Visibility" 
                               OnClick="@(() => ViewPigPenDetails(context.Id))">
                        View
                    </MudButton>
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
        <LoadingContent>
            <MudText>Loading pig pens...</MudText>
        </LoadingContent>
        <NoRecordsContent>
            <MudText>No pig pens found.</MudText>
        </NoRecordsContent>
    </MudTable>
</MudPaper>

@if (selectedPen != Guid.Empty)
{
    <PigPenDetail PigPenId="selectedPen" OnClose="@(() => selectedPen = Guid.Empty)" />
}

@code {
    private List<Customer> customers = new();
    private List<PigPen> pigPens = new();
    private List<PigPen> filteredPigPens = new();
    private Dictionary<Guid, PigPenSummary> summaries = new();
    private Guid? selectedCustomerId = null;
    private string searchText = "";
    private bool loading = true;
    private Guid selectedPen = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        loading = true;
        try
        {
            customers = await Http.GetFromJsonAsync<List<Customer>>("/api/customers") ?? new();
            pigPens = await Http.GetFromJsonAsync<List<PigPen>>("/api/pigpens") ?? new();
            
            // Load summaries for each pig pen
            foreach (var pen in pigPens)
            {
                var summary = await Http.GetFromJsonAsync<PigPenSummary>($"/api/pigpens/{pen.Id}/summary");
                if (summary != null)
                    summaries[pen.Id] = summary;
            }
            
            FilterPigPens();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private void FilterPigPens()
    {
        filteredPigPens = pigPens.Where(p =>
            (!selectedCustomerId.HasValue || p.CustomerId == selectedCustomerId.Value) &&
            (string.IsNullOrEmpty(searchText) || 
             p.PenCode.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             GetCustomerName(p.CustomerId).Contains(searchText, StringComparison.OrdinalIgnoreCase))
        ).ToList();
    }

    private string GetCustomerName(Guid customerId)
    {
        return customers.FirstOrDefault(c => c.Id == customerId)?.Name ?? "Unknown";
    }

    private PigPenSummary? GetSummary(Guid pigPenId)
    {
        summaries.TryGetValue(pigPenId, out var summary);
        return summary;
    }

    private async Task ShowAddDialog()
    {
        var parameters = new DialogParameters<AddPigPenDialog>();
        parameters.Add(x => x.Customers, customers);
        
        var dialog = await DialogService.ShowAsync<AddPigPenDialog>("Add New Pig Pen", parameters);
        var result = await dialog.Result;
        
        if (!result.Canceled && result.Data != null)
        {
            await LoadData();
            Snackbar.Add("Pig pen added successfully!", Severity.Success);
        }
    }

    private void ViewPigPenDetails(Guid pigPenId)
    {
        selectedPen = pigPenId;
    }

    private void OnParametersSet()
    {
        FilterPigPens();
    }
}
