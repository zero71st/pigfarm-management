@inject HttpClient Http

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-width: 500px;">
            <MudGrid>
                <MudItem xs="12">
                    <MudSelect T="Guid?" @bind-Value="pigPen.CustomerId" Label="Customer" Variant="Variant.Outlined" Required="true">
                        <MudSelectItem Value="@((Guid?)null)">-- Select Customer --</MudSelectItem>
                        @foreach (var customer in Customers)
                        {
                            <MudSelectItem Value="@customer.Id">@customer.Name (@customer.Type)</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="pigPen.PenCode" Label="Pen Code" Variant="Variant.Outlined" Required="true" />
                </MudItem>
                <MudItem xs="6">
                    <MudNumericField @bind-Value="pigPen.PigQty" Label="Pig Quantity" Variant="Variant.Outlined" Min="1" Required="true" />
                </MudItem>
                <MudItem xs="6">
                    <MudDatePicker @bind-Date="startDate" Label="Start Date" Variant="Variant.Outlined" Required="true" />
                </MudItem>
                <MudItem xs="6">
                    <MudDatePicker @bind-Date="endDate" Label="End Date" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="6">
                    <MudDatePicker @bind-Date="estimatedHarvestDate" Label="Estimated Harvest Date" Variant="Variant.Outlined" />
                </MudItem>
            </MudGrid>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit">
            Add Pig Pen
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public List<Customer> Customers { get; set; } = new();

    private CreatePigPenModel pigPen = new();
    private DateTime? startDate = DateTime.Today;
    private DateTime? endDate;
    private DateTime? estimatedHarvestDate;

    async Task Submit()
    {
        if (!pigPen.CustomerId.HasValue || string.IsNullOrWhiteSpace(pigPen.PenCode) || pigPen.PigQty <= 0)
        {
            return; // Basic validation
        }

        var dto = new
        {
            CustomerId = pigPen.CustomerId.Value,
            PenCode = pigPen.PenCode,
            PigQty = pigPen.PigQty,
            StartDate = startDate ?? DateTime.Today,
            EndDate = endDate,
            EstimatedHarvestDate = estimatedHarvestDate
        };

        try
        {
            var response = await Http.PostAsJsonAsync("/api/pigpens", dto);
            if (response.IsSuccessStatusCode)
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
        }
        catch
        {
            // Handle error
        }
    }
    
    void Cancel() => MudDialog.Cancel();

    class CreatePigPenModel
    {
        public Guid? CustomerId { get; set; }
        public string PenCode { get; set; } = string.Empty;
        public int PigQty { get; set; } = 0;
    }
}
