@using Microsoft.AspNetCore.Components
@using MudBlazor
@using PigFarmManagement.Shared.Models
@using PigFarmManagement.Client.Features.PigPens.Services
@inject IPigPenService PigPenService

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-width: 600px;">
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Class="pa-4 mb-4" Elevation="2">
                        <div class="d-flex align-center mb-3">
                            <MudIcon Icon="@GetCustomerIcon(Customer.Status)" Size="Size.Large" Class="mr-3" />
                            <div>
                                <MudText Typo="Typo.h5">@Customer.Name</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">@Customer.Code</MudText>
                            </div>
                        </div>
                        <MudChip Text="@Customer.Status.ToString()" 
                                Color="@GetCustomerStatusColor(Customer.Status)" 
                                Size="Size.Medium" />
                    </MudPaper>
                </MudItem>

                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-3">
                        <MudIcon Icon="Icons.Material.Filled.Agriculture" Class="mr-2" />
                        Pig Pens (@pigPens.Count)
                    </MudText>
                    
                    @if (isLoading)
                    {
                        <div class="d-flex justify-center pa-4">
                            <MudProgressCircular Indeterminate="true" Size="Size.Small" />
                        </div>
                    }
                    else if (pigPens.Any())
                    {
                        <MudPaper Class="pa-3" Elevation="1">
                            @foreach (var pigPen in pigPens)
                            {
                                <div class="d-flex justify-space-between align-center pa-2 mb-2 border-bottom">
                                    <div>
                                        <MudText Typo="Typo.body1">@pigPen.Name</MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary">Code: @pigPen.Code</MudText>
                                    </div>
                                    <div class="text-right">
                                        <MudText Typo="Typo.body2">
                                            <strong>@pigPen.CurrentPigCount</strong>/@pigPen.MaxCapacity pigs
                                        </MudText>
                                        <MudProgressLinear Value="@GetCapacityPercentage(pigPen)" 
                                                          Color="@GetCapacityColor(pigPen)" 
                                                          Size="Size.Small" />
                                    </div>
                                </div>
                            }
                        </MudPaper>
                    }
                    else
                    {
                        <MudPaper Class="pa-4 text-center" Elevation="1">
                            <MudIcon Icon="Icons.Material.Filled.Agriculture" Color="Color.Default" Class="mb-2" />
                            <MudText Typo="Typo.body2">No pig pens assigned to this customer</MudText>
                        </MudPaper>
                    }
                </MudItem>

                @if (pigPens.Any())
                {
                    <MudItem xs="12">
                        <MudText Typo="Typo.h6" Class="mb-3">
                            <MudIcon Icon="Icons.Material.Filled.Analytics" Class="mr-2" />
                            Statistics
                        </MudText>
                        <MudGrid>
                            <MudItem xs="6" sm="3">
                                <MudPaper Class="pa-3 text-center" Elevation="1">
                                    <MudText Typo="Typo.h6" Color="Color.Primary">@pigPens.Count</MudText>
                                    <MudText Typo="Typo.body2">Pig Pens</MudText>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="6" sm="3">
                                <MudPaper Class="pa-3 text-center" Elevation="1">
                                    <MudText Typo="Typo.h6" Color="Color.Success">@pigPens.Sum(p => p.CurrentPigCount)</MudText>
                                    <MudText Typo="Typo.body2">Total Pigs</MudText>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="6" sm="3">
                                <MudPaper Class="pa-3 text-center" Elevation="1">
                                    <MudText Typo="Typo.h6" Color="Color.Info">@pigPens.Sum(p => p.MaxCapacity)</MudText>
                                    <MudText Typo="Typo.body2">Max Capacity</MudText>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="6" sm="3">
                                <MudPaper Class="pa-3 text-center" Elevation="1">
                                    <MudText Typo="Typo.h6" Color="Color.Warning">@(Math.Round(GetAverageCapacity(), 1))%</MudText>
                                    <MudText Typo="Typo.body2">Avg Capacity</MudText>
                                </MudPaper>
                            </MudItem>
                        </MudGrid>
                    </MudItem>
                }
            </MudGrid>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Close">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public Customer Customer { get; set; } = null!;

    private List<PigPen> pigPens = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadPigPens();
    }

    private async Task LoadPigPens()
    {
        try
        {
            isLoading = true;
            var allPigPens = await PigPenService.GetPigPensAsync();
            pigPens = allPigPens.Where(p => p.CustomerId == Customer.Id).ToList();
        }
        catch
        {
            pigPens = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    void Close() => MudDialog.Close();

    private string GetCustomerIcon(CustomerStatus status)
    {
        return status switch
        {
            CustomerStatus.Active => Icons.Material.Filled.CheckCircle,
            CustomerStatus.Inactive => Icons.Material.Filled.Cancel,
            _ => Icons.Material.Filled.Person
        };
    }

    private Color GetCustomerStatusColor(CustomerStatus status)
    {
        return status switch
        {
            CustomerStatus.Active => Color.Success,
            CustomerStatus.Inactive => Color.Error,
            _ => Color.Default
        };
    }

    private double GetCapacityPercentage(PigPen pigPen)
    {
        if (pigPen.MaxCapacity == 0) return 0;
        return (double)pigPen.CurrentPigCount / pigPen.MaxCapacity * 100;
    }

    private Color GetCapacityColor(PigPen pigPen)
    {
        var percentage = GetCapacityPercentage(pigPen);
        return percentage switch
        {
            >= 90 => Color.Error,
            >= 75 => Color.Warning,
            >= 50 => Color.Info,
            _ => Color.Success
        };
    }

    private double GetAverageCapacity()
    {
        if (!pigPens.Any()) return 0;
        return pigPens.Average(GetCapacityPercentage);
    }
}
