@page "/customers"
@using Microsoft.AspNetCore.Components
@using MudBlazor
@using PigFarmManagement.Shared.Models
@using PigFarmManagement.Client.Features.Customers.Services
@using PigFarmManagement.Client.Features.Customers.Components
@using PigFarmManagement.Client.Features.PigPens.Services
@inject ICustomerService CustomerService
@inject IPigPenService PigPenService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject HttpClient Http

<PageTitle>PigTrack Pro - Customers</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-4">
        <MudIcon Icon="Icons.Material.Filled.People" Class="mr-2" />
        Customer Management
    </MudText>

    <!-- Action Bar -->
    <MudPaper Class="pa-4 mb-4" Elevation="2">
        <MudGrid AlignItems="Center">
            <MudItem xs="12" md="6">
                <MudTextField @bind-Value="searchText" 
                             Label="Search customers..." 
                             Variant="Variant.Outlined" 
                             Adornment="Adornment.End" 
                             AdornmentIcon="Icons.Material.Filled.Search"
                             OnKeyUp="OnSearchKeyUp"
                             Immediate="true" />
            </MudItem>
            <MudItem xs="12" md="3">
                <MudSelect T="CustomerStatus?" @bind-Value="selectedCustomerStatus" 
                          Label="Filter by Status" 
                          Variant="Variant.Outlined"
                          Clearable="true">
                    <MudSelectItem T="CustomerStatus?" Value="@CustomerStatus.Active">Active</MudSelectItem>
                    <MudSelectItem T="CustomerStatus?" Value="@CustomerStatus.Inactive">Inactive</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="3" Class="text-right">
                <MudStack Row Spacing="1" Class="align-items-center justify-content-end">
                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="StartImport" Disabled="_importRunning">
                        <MudIcon Icon="Icons.Material.Filled.Download" Class="mr-1" /> Import
                    </MudButton>

                    <MudSwitch @bind-Value="_persistMapping" Color="Color.Primary" />

                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Primary" 
                              StartIcon="Icons.Material.Filled.Add"
                              OnClick="OpenAddCustomerDialog">
                        Add Customer
                    </MudButton>
                </MudStack>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <!-- Customer Cards Grid -->
    <MudGrid>
        @if (isLoading)
        {
            <MudItem xs="12">
                <div class="d-flex justify-center pa-8">
                    <MudProgressCircular Indeterminate="true" Size="Size.Medium" />
                </div>
            </MudItem>
        }
        else if (filteredCustomers?.Any() == true)
        {
            @foreach (var customer in filteredCustomers)
            {
                <MudItem xs="12" sm="6" md="4" lg="3">
                    <CustomerCard Customer="customer" 
                                 PigPenCount="@GetCustomerPigPenCount(customer.Id)"
                                 OnEdit="EditCustomer"
                                 OnDelete="DeleteCustomer"
                                 OnViewDetails="ViewCustomerDetails" />
                </MudItem>
            }
        }
        else
        {
            <MudItem xs="12">
                <CustomerEmptyState OnAddCustomer="OpenAddCustomerDialog" 
                                   HasFilters="@(!string.IsNullOrEmpty(searchText) || selectedCustomerStatus != null)" />
            </MudItem>
        }
    </MudGrid>

    <!-- Stats Summary -->
    @if (customers?.Any() == true)
    {
        <CustomerStatistics Customers="customers" PigPens="pigPens" />
    }
</MudContainer>

@code {
    private List<Customer> customers = new();
    private List<Customer> filteredCustomers = new();
    private List<PigPen> pigPens = new();
    private bool isLoading = true;
    private string searchText = "";
    private CustomerStatus? selectedCustomerStatus = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            
            // Load customers and pig pens in parallel
            var customersTask = CustomerService.GetCustomersAsync();
            var pigPensTask = PigPenService.GetPigPensAsync();
            
            await Task.WhenAll(customersTask, pigPensTask);
            
            customers = customersTask.Result;
            pigPens = pigPensTask.Result;
            
            FilterCustomers();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterCustomers()
    {
        filteredCustomers = customers.Where(c =>
            (string.IsNullOrEmpty(searchText) || 
             c.DisplayName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             c.Code.Contains(searchText, StringComparison.OrdinalIgnoreCase)) &&
            (selectedCustomerStatus == null || c.Status == selectedCustomerStatus)
        ).ToList();
        
        // Show the most recently imported/updated customers first
        // Use UpdatedAt (set by the importer) as the primary sort key. If UpdatedAt is null, treat it as DateTime.MinValue.
        filteredCustomers = filteredCustomers
            .OrderByDescending(c => c.UpdatedAt)
            .ThenByDescending(c => c.CreatedAt)
            .ToList();
    }

    private void OnSearchKeyUp(KeyboardEventArgs e)
    {
        FilterCustomers();
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        FilterCustomers();
    }

    private int GetCustomerPigPenCount(Guid customerId)
    {
        return pigPens.Count(p => p.CustomerId == customerId);
    }

    private async Task OpenAddCustomerDialog()
    {
        var dialog = await DialogService.ShowAsync<AddCustomerDialog>("Add New Customer");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
            Snackbar.Add("Customer added successfully!", Severity.Success);
        }
    }

    private async Task EditCustomer(Customer customer)
    {
        var parameters = new DialogParameters { ["Customer"] = customer };
        var dialog = await DialogService.ShowAsync<EditCustomerDialog>("Edit Customer", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
            Snackbar.Add("Customer updated successfully!", Severity.Success);
        }
    }

    private async Task DeleteCustomer(Customer customer)
    {
        var parameters = new DialogParameters
        {
            ["ContentText"] = $"Are you sure you want to delete customer '{customer.DisplayName}'? This action cannot be undone.",
            ["ButtonText"] = "Delete",
            ["ButtonColor"] = Color.Error
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<DeleteConfirmationDialog>("Delete Customer", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                var success = await CustomerService.DeleteCustomerAsync(customer.Id);
                if (success)
                {
                    await LoadData();
                    Snackbar.Add("Customer deleted successfully!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Failed to delete customer. Please try again.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting customer: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task ViewCustomerDetails(Customer customer)
    {
        var parameters = new DialogParameters { ["Customer"] = customer };
        await DialogService.ShowAsync<CustomerDetailsDialog>("Customer Details", parameters);
    }
}

@code {
    // Import UI state
    private bool _persistMapping = false;
    private bool _importRunning = false;

    private async Task StartImport()
    {
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters { ["PersistMapping"] = _persistMapping };
        var dialog = await DialogService.ShowAsync<Components.ImportCandidatesDialog>("Import from POSPOS", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            // reload data after successful import
            await LoadData();
        }
    }

    private async Task GetSummary()
    {
        try
        {
            var resp = await Http.GetAsync("/import/customers/summary");
            if (resp.IsSuccessStatusCode)
            {
                var txt = await resp.Content.ReadAsStringAsync();
                Snackbar.Add("Summary loaded.", Severity.Info);
            }
            else if (resp.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Snackbar.Add("No import has been run yet.", Severity.Warning);
            }
            else
            {
                var txt = await resp.Content.ReadAsStringAsync();
                Snackbar.Add($"Failed to load summary: {resp.StatusCode} - {txt}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Summary error: {ex.Message}", Severity.Error);
        }
    }
}
