@page "/feed-formulas"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using PigFarmManagement.Client.Features.FeedFormulas.Services
@using PigFarmManagement.Client.Features.FeedFormulas.Components
@inject IFeedFormulaService FeedFormulaService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>Feed Formula Management</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <MudText Typo="Typo.h4" GutterBottom="true" Class="mb-4">
        <MudIcon Icon="@Icons.Material.Filled.Science" Class="mr-2" />
        Feed Formula Management
    </MudText>

    @if (loading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="ma-2" />
        <MudText>Loading feed formulas...</MudText>
    }
    else
    {
        <!-- Brand Statistics Cards -->
        <MudGrid Class="mb-4">
            <MudItem xs="12" sm="6" md="4">
                <MudCard Elevation="2">
                    <MudCardContent>
                        <div style="display: flex; align-items: center;">
                            <MudIcon Icon="Icons.Material.Filled.Science" Color="Color.Primary" Style="margin-right: 8px;" />
                            <div>
                                <MudText Typo="Typo.h6">Total Feed Formulas</MudText>
                                <MudText Typo="Typo.h4" Color="Color.Primary">@feedFormulas.Count</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudCard Elevation="2">
                    <MudCardContent>
                        <div style="display: flex; align-items: center;">
                            <MudIcon Icon="Icons.Material.Filled.LocalShipping" Color="Color.Primary" Style="margin-right: 8px;" />
                            <div>
                                <MudText Typo="Typo.h6">‡πÄ‡∏à‡πá‡∏ó</MudText>
                                <MudText Typo="Typo.h4" Color="Color.Primary">@GetBrandCount("‡πÄ‡∏à‡πá‡∏ó")</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudCard Elevation="2">
                    <MudCardContent>
                        <div style="display: flex; align-items: center;">
                            <MudIcon Icon="Icons.Material.Filled.LocalShipping" Color="Color.Secondary" Style="margin-right: 8px;" />
                            <div>
                                <MudText Typo="Typo.h6">‡πÄ‡∏û‡∏µ‡∏¢‡∏ß</MudText>
                                <MudText Typo="Typo.h4" Color="Color.Secondary">@GetBrandCount("‡πÄ‡∏û‡∏µ‡∏¢‡∏ß")</MudText>
                            </div>
                        </div>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        <MudStack Class="mb-4">
            <MudGrid>
                <MudItem xs="12" sm="6" md="3">
                    <MudSelect T="string" 
                             @bind-Value="selectedBrandFilter" 
                             Label="Filter by Brand" 
                             Variant="Variant.Outlined"
                             Margin="Margin.Dense"
                             Clearable="true">
                        <MudSelectItem T="string" Value="@((string?)null)">All Brands</MudSelectItem>
                        @foreach (var brand in GetUniqueBrands())
                        {
                            <MudSelectItem T="string" Value="@brand">@brand (@GetBrandCount(brand))</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudSelect T="string" 
                             @bind-Value="selectedCategoryFilter" 
                             Label="Filter by Category" 
                             Variant="Variant.Outlined"
                             Margin="Margin.Dense"
                             Clearable="true">
                        <MudSelectItem T="string" Value="@((string?)null)">All Categories</MudSelectItem>
                        @foreach (var category in GetUniqueCategories())
                        {
                            <MudSelectItem T="string" Value="@category">@category (@GetCategoryCount(category))</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
               
                <MudItem xs="12" sm="6" md="2">
                    @* <MudStack Row Spacing="1">
                        <MudButton Variant="Variant.Outlined" 
                                  Color="Color.Secondary" 
                                  StartIcon="@Icons.Material.Filled.Clear"
                                  OnClick="ClearFilters"
                                  Size="Size.Small"
                                  Disabled="@(string.IsNullOrEmpty(selectedBrandFilter) && string.IsNullOrEmpty(selectedCategoryFilter))">
                            Clear
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" 
                                  Color="Color.Default" 
                                  StartIcon="@Icons.Material.Filled.Refresh"
                                  OnClick="RefreshData"
                                  Size="Size.Small">
                            Refresh
                        </MudButton>
                    </MudStack> *@
                </MudItem>
                <MudItem xs="12" sm="6" md="4" Class="d-flex justify-end">
                    <MudButton Variant="Variant.Filled" 
                              Color="Color.Success" 
                              StartIcon="@Icons.Material.Filled.CloudDownload"
                              OnClick="@ImportFromPospos">
                        Import Products
                    </MudButton>
                </MudItem>
                <MudItem xs="12" md="12" Class="d-flex align-center">
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        Showing @filteredFeedFormulas.Count of @feedFormulas.Count feed formulas
                        @if (!string.IsNullOrEmpty(selectedBrandFilter))
                        {
                            <text> for brand "@selectedBrandFilter"</text>
                        }
                        @if (!string.IsNullOrEmpty(selectedCategoryFilter))
                        {
                            <text> in category "@selectedCategoryFilter"</text>
                        }
                    </MudText>
                </MudItem>
            </MudGrid>
        </MudStack>

        <MudDataGrid T="FeedFormulaDto" 
                     Items="@filteredFeedFormulas" 
                     Dense="true" 
                     Hover="true" 
                     Bordered="true" 
                     Striped="true"
                     FilterMode="DataGridFilterMode.ColumnFilterRow"
                     SortMode="@SortMode.Multiple"
                     Groupable="false">
            
            <Columns>
                <PropertyColumn Property="x => x.Code" Title="Product Code" />
                <PropertyColumn Property="x => x.Name" Title="Product Name" />
                <TemplateColumn Title="Category (POSPOS)" Sortable="false" Filterable="true">
                    <CellTemplate>
                        <MudChip Color="@GetBrandColor(context.Item.CategoryName ?? "")" 
                                Size="Size.Small" 
                                Variant="Variant.Filled">
                            @context.Item.CategoryName
                        </MudChip>
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.Brand" Title="Brand (Manual)" />
                <PropertyColumn Property="x => x.Cost" Title="Cost" Format="N2" />
                <PropertyColumn Property="x => x.UnitName" Title="Unit" />
                <PropertyColumn Property="x => x.ConsumeRate" Title="Consume Rate" Format="F2" />
                           
                <TemplateColumn Title="Actions" CellClass="d-flex justify-end" Sortable="false" Filterable="false">
                    <CellTemplate>
                        <div style="display: flex; gap: 8px;">
                            <button class="btn btn-sm btn-primary" @onclick="@(() => OpenEditDialog(context.Item))" title="Edit">
                                ‚úèÔ∏è Edit
                            </button>
                            <button class="btn btn-sm btn-danger" @onclick="@(() => DeleteFeedFormula(context.Item))" title="Delete">
                                üóëÔ∏è Delete
                            </button>
                        </div>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            
            <NoRecordsContent>
                <MudText>No feed formulas found. Click "Add New Feed Formula" to create one.</MudText>
            </NoRecordsContent>
        </MudDataGrid>
    }
</MudContainer>

@code {
    private List<FeedFormulaDto> feedFormulas = new();
    private List<FeedFormulaDto> filteredFeedFormulas = new();
    private bool loading = true;
    
    private string? _selectedBrandFilter;
    private string? selectedBrandFilter
    {
        get => _selectedBrandFilter;
        set
        {
            _selectedBrandFilter = value;
            ApplyFilters();
        }
    }
    
    private string? _selectedCategoryFilter;
    private string? selectedCategoryFilter
    {
        get => _selectedCategoryFilter;
        set
        {
            _selectedCategoryFilter = value;
            ApplyFilters();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadFeedFormulas();
    }

    private async Task LoadFeedFormulas()
    {
        try
        {
            loading = true;
            var result = await FeedFormulaService.GetAllFeedFormulasAsync();
            feedFormulas = result.ToList();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading feed formulas: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private void ApplyFilters()
    {
        filteredFeedFormulas = feedFormulas.Where(f =>
        {
            var matchesBrand = string.IsNullOrEmpty(selectedBrandFilter) || 
                              (f.Brand ?? "").Contains(selectedBrandFilter, StringComparison.OrdinalIgnoreCase);
            
            var matchesCategory = string.IsNullOrEmpty(selectedCategoryFilter) || 
                                 (f.CategoryName ?? "").Equals(selectedCategoryFilter, StringComparison.OrdinalIgnoreCase);
            
            return matchesBrand && matchesCategory;
        }).ToList();
        StateHasChanged();
    }

    private void ClearFilters()
    {
        _selectedBrandFilter = null;
        _selectedCategoryFilter = null;
        ApplyFilters();
    }

    private IEnumerable<string> GetUniqueBrands()
    {
        return feedFormulas
            .Select(f => f.Brand ?? "")
            .Where(b => !string.IsNullOrEmpty(b))
            .Distinct()
            .OrderBy(b => b);
    }

    private IEnumerable<string> GetUniqueCategories()
    {
        return feedFormulas
            .Select(f => f.CategoryName ?? "")
            .Where(c => !string.IsNullOrEmpty(c))
            .Distinct()
            .OrderBy(c => c);
    }

    private int GetBrandCount(string brand)
    {
        return feedFormulas.Count(f => (f.Brand ?? "").Contains(brand, StringComparison.OrdinalIgnoreCase));
    }

    private int GetCategoryCount(string category)
    {
        return feedFormulas.Count(f => (f.CategoryName ?? "").Equals(category, StringComparison.OrdinalIgnoreCase));
    }

    private Color GetBrandColor(string brand)
    {
        return brand switch
        {
            "‡πÄ‡∏à‡πá‡∏ó" => Color.Primary,
            "‡πÄ‡∏û‡∏µ‡∏¢‡∏ß" => Color.Secondary,
            "‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏±‡∏ï‡∏ß‡πå" => Color.Info,
            _ => Color.Default
        };
    }

    private void QuickFilterBrand(string brand)
    {
        selectedBrandFilter = selectedBrandFilter == brand ? null : brand;
        // ApplyFilters() is automatically called by the setter
    }

    private async Task RefreshData()
    {
        await LoadFeedFormulas();
        Snackbar.Add("Feed formulas refreshed", Severity.Info);
    }

    private async Task OpenEditDialog(FeedFormulaDto feedFormula)
    {
        var parameters = new DialogParameters<EditFeedFormulaDialog>
        {
            { x => x.FeedFormulaId, feedFormula.Id }
        };
        
        var dialog = await DialogService.ShowAsync<EditFeedFormulaDialog>("Edit Feed Formula", parameters, new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        });

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadFeedFormulas();
            Snackbar.Add("Feed formula updated successfully", Severity.Success);
        }
    }

    private async Task DeleteFeedFormula(FeedFormulaDto feedFormula)
    {
        var confirmed = await DialogService.ShowMessageBox(
            "Delete Feed Formula",
            $"Are you sure you want to delete '{feedFormula.Name ?? feedFormula.Code}'? This action cannot be undone.",
            yesText: "Yes, Delete",
            cancelText: "Cancel");

        if (confirmed == true)
        {
            try
            {
                var deleted = await FeedFormulaService.DeleteFeedFormulaAsync(feedFormula.Id);
                if (deleted)
                {
                    await LoadFeedFormulas();
                    Snackbar.Add("Feed formula deleted successfully", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Feed formula not found", Severity.Warning);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting feed formula: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task ImportFromPospos()
    {
        try
        {
            // Show the product selection dialog
            var parameters = new DialogParameters();
            var options = new DialogOptions()
            {
                MaxWidth = MaxWidth.Large,
                CloseOnEscapeKey = true,
                CloseButton = true,
                FullWidth = true
            };

            var dialog = await DialogService.ShowAsync<ProductSelectionDialog>("Select Products to Import", parameters, options);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                // Dialog completed successfully - products were imported
                // The dialog handles the import internally and shows its own success messages
                // Refresh the data grid to show the new imports
                await LoadFeedFormulas();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error showing product selection dialog: {ex.Message}", Severity.Error);
        }
    }
}
