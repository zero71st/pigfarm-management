@using MudBlazor
@using PigFarmManagement.Client.Features.FeedFormulas.Services
@using Microsoft.AspNetCore.Components.Web
@inject IFeedFormulaService FeedFormulaService
@inject ISnackbar Snackbar
@using PigFarmManagement.Shared.Domain.External

<MudDialog>
    <TitleContent>
        <div style="display: flex; align-items: center;">
            <MudIcon Icon="@Icons.Material.Filled.CloudDownload" Class="mr-2" />
            <MudText Typo="Typo.h6">Select Products to Import from POSPOS</MudText>
        </div>
    </TitleContent>
    
    <DialogContent>
        <MudContainer Style="max-width: 900px; max-height: 600px;">
            <!-- Search Section -->
            <MudPaper Class="pa-3 mb-3" Elevation="1">
                <MudGrid AlignItems="Center">
                    <MudItem xs="12" sm="9">
                        <MudTextField @bind-Value="searchText"
                                     Label="Search by product code or name..."
                                     Variant="Variant.Outlined"
                                     Adornment="Adornment.Start"
                                     AdornmentIcon="@Icons.Material.Filled.Search"
                                     OnKeyDown="OnSearchKeyDown"
                                     Clearable="true" />
                    </MudItem>
                    <MudItem xs="12" sm="3">
                        <MudButton Color="Color.Primary" 
                                  Variant="Variant.Filled" 
                                  OnClick="PerformSearch"
                                  StartIcon="@Icons.Material.Filled.Search"
                                  Disabled="@(string.IsNullOrWhiteSpace(searchText) || searching)"
                                  FullWidth="true">
                            @if (searching)
                            {
                                <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" />
                                <span>Searching...</span>
                            }
                            else
                            {
                                <span>Search</span>
                            }
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>

            @if (searching)
            {
                <div style="display: flex; justify-content: center; align-items: center; height: 200px;">
                    <MudProgressCircular Size="Size.Large" Indeterminate="true" />
                    <MudText Class="ml-3">Searching products...</MudText>
                </div>
            }
            else if (!hasSearched)
            {
                <MudAlert Severity="Severity.Info" Class="text-center">
                    <MudIcon Icon="@Icons.Material.Filled.Search" Class="mr-2" />
                    Enter a product code or name above and click Search to find products to import.
                </MudAlert>
            }
            else if (products.Count == 0)
            {
                <MudAlert Severity="Severity.Warning">
                    No products found matching your search criteria. Try a different search term.
                </MudAlert>
            }
            else
            {
                <MudStack Spacing="3">
                    <!-- Selection Summary -->
                    <MudPaper Class="pa-3" Elevation="1">
                        <MudGrid AlignItems="Center">
                            <MudItem xs="8">
                                <MudText Typo="Typo.body1">
                                    <strong>@selectedProducts.Count</strong> of <strong>@products.Count</strong> products selected
                                </MudText>
                            </MudItem>
                            <MudItem xs="4" Class="d-flex justify-end">
                                <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                                    <MudButton OnClick="SelectAll" 
                                              StartIcon="@Icons.Material.Filled.SelectAll"
                                              Disabled="@(selectedProducts.Count == products.Count)">
                                        Select All
                                    </MudButton>
                                    <MudButton OnClick="ClearSelection" 
                                              StartIcon="@Icons.Material.Filled.Clear"
                                              Disabled="@(selectedProducts.Count == 0)">
                                        Clear
                                    </MudButton>
                                </MudButtonGroup>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>

                    <!-- Products Grid -->
                    <MudDataGrid T="PosposProduct" 
                                Items="@products" 
                                Dense="true" 
                                Hover="true" 
                                MultiSelection="true"
                                @bind-SelectedItems="selectedProductsHashSet"
                                SelectOnRowClick="true"
                                Height="350px"
                                FixedHeader="true">
                        
                        <Columns>
                            <SelectColumn T="PosposProduct" />
                            <PropertyColumn Property="x => x.Code" Title="Code" />
                            <PropertyColumn Property="x => x.Name" Title="Product Name" />
                            <TemplateColumn Title="Category">
                                <CellTemplate>
                                    <MudChip Size="Size.Small" Color="Color.Info">
                                        @(context.Item.Category?.Name ?? "N/A")
                                    </MudChip>
                                </CellTemplate>
                            </TemplateColumn>
                            <PropertyColumn Property="x => x.Cost" Title="Cost" Format="N2" />
                            <TemplateColumn Title="Unit">
                                <CellTemplate>
                                    @(context.Item.Unit?.Name ?? "N/A")
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>

                        <NoRecordsContent>
                            <MudText>No products match your search criteria.</MudText>
                        </NoRecordsContent>
                    </MudDataGrid>
                </MudStack>
            }
        </MudContainer>
    </DialogContent>
    
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Text">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                  Variant="Variant.Filled" 
                  OnClick="ImportSelected"
                  StartIcon="@Icons.Material.Filled.Download"
                  Disabled="@(selectedProducts.Count == 0 || importing)">
            @if (importing)
            {
                <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" />
                <span>Importing @selectedProducts.Count products...</span>
            }
            else
            {
                <span>Import @selectedProducts.Count Selected</span>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    private List<PosposProduct> products = new List<PosposProduct>();
    private HashSet<PosposProduct> selectedProductsHashSet = new();
    private List<PosposProduct> selectedProducts => selectedProductsHashSet.ToList();
    
    private bool searching = false;
    private bool hasSearched = false;
    private bool importing = false;
    private string searchText = string.Empty;

    private async Task OnSearchKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(searchText))
        {
            await PerformSearch();
        }
    }

    private async Task PerformSearch()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            Snackbar.Add("Please enter a search term", Severity.Warning);
            return;
        }

        try
        {
            searching = true;
            hasSearched = false;
            
            // Clear previous selections when performing new search
            selectedProductsHashSet.Clear();
            
            StateHasChanged();

            // Use the new search API
            products = await FeedFormulaService.SearchPosposProductsAsync(searchText.Trim());
            hasSearched = true;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error searching products: {ex.Message}", Severity.Error);
            products = new List<PosposProduct>();
        }
        finally
        {
            searching = false;
            StateHasChanged();
        }
    }

    private void SelectAll()
    {
        selectedProductsHashSet = products.ToHashSet();
        StateHasChanged();
    }

    private void ClearSelection()
    {
        selectedProductsHashSet.Clear();
        StateHasChanged();
    }

    private async Task ImportSelected()
    {
        if (selectedProducts.Count == 0)
        {
            Snackbar.Add("Please select at least one product to import", Severity.Warning);
            return;
        }

        try
        {
            importing = true;
            StateHasChanged();

            // Use product codes instead of IDs for more reliable import
            var productCodes = selectedProducts
                .Where(p => !string.IsNullOrWhiteSpace(p.Code))
                .Select(p => p.Code!)
                .ToList();

            if (productCodes.Count == 0)
            {
                Snackbar.Add("Selected products have no valid codes", Severity.Error);
                return;
            }

            // Use the existing code-based import method
            var result = await FeedFormulaService.ImportSelectedFromPosposAsync(productCodes);

            // Show results using the old ImportResultResponse structure
            if (result.SuccessCount > 0)
            {
                Snackbar.Add($"✅ Successfully imported {result.SuccessCount} products", Severity.Success);
            }

            if (result.SkippedCount > 0)
            {
                Snackbar.Add($"⚠️ Skipped {result.SkippedCount} duplicate products", Severity.Warning);
            }

            if (result.ErrorCount > 0)
            {
                Snackbar.Add($"❌ Failed to import {result.ErrorCount} products", Severity.Error);
                
                // Show individual error messages
                foreach (var error in result.Errors.Take(3))
                {
                    Snackbar.Add($"Error: {error}", Severity.Error);
                }
            }

            // Close dialog and return result
            MudDialog.Close(DialogResult.Ok(result));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Import failed: {ex.Message}", Severity.Error);
        }
        finally
        {
            importing = false;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}