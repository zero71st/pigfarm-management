@using Microsoft.AspNetCore.Components
@using MudBlazor
@using PigFarmManagement.Shared.Models
@using PigFarmManagement.Client.Features.Customers.Services
@using PigFarmManagement.Client.Features.PigPens.Services
@using PigFarmManagement.Client.Features.FeedFormulas.Services
@using PigFarmManagement.Shared
@inject ICustomerService CustomerService
@inject IPigPenService PigPenService
@inject IFeedFormulaCalculationService FeedFormulaCalculationService
@inject IFeedFormulaService FeedFormulaService

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-width: 500px;">
            <MudGrid>
                <MudItem xs="12">
                    <MudSelect T="Guid?" @bind-Value="selectedCustomerId" Label="Customer" Variant="Variant.Outlined" Required="true">
                        <MudSelectItem T="Guid?" Value="@((Guid?)null)">-- Select Customer --</MudSelectItem>
                        @foreach (var customer in customers)
                        {
                            <MudSelectItem T="Guid?" Value="@((Guid?)customer.Id)">@customer.DisplayName (@customer.Status)</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="penCode" Label="Pen Code" Variant="Variant.Outlined" Required="true" />
                </MudItem>
                <MudItem xs="12">
                    <MudSelect T="PigPenType" @bind-Value="selectedType" Label="Pig Pen Type" Variant="Variant.Outlined" Required="true">
                        <MudSelectItem T="PigPenType" Value="PigPenType.Cash">Cash</MudSelectItem>
                        <MudSelectItem T="PigPenType" Value="PigPenType.Project">Project</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="6">
                    <MudNumericField Value="pigQty" 
                                   ValueChanged="@((int value) => OnPigQuantityChanged(value))"
                                   Label="Pig Quantity" 
                                   Variant="Variant.Outlined" 
                                   Min="1" 
                                   Required="true" />
                </MudItem>
                <MudItem xs="6">
                    <MudNumericField @bind-Value="depositPerPig" 
                                   Label="Deposit Per Pig (บาท)" 
                                   Variant="Variant.Outlined" 
                                   Min="0" 
                                   Step="100"
                                   Format="N0"
                                   Required="true" 
                                   Adornment="Adornment.End" 
                                   AdornmentText="฿" />
                </MudItem>
                <MudItem xs="6">
                    <MudDatePicker Date="registerDate" 
                                  DateChanged="@OnRegisterDateChanged"
                                  Label="Register Date" 
                                  Variant="Variant.Outlined" 
                                  Required="true" />
                </MudItem>
                <MudItem xs="6">
                    <MudDatePicker @bind-Date="estimatedHarvestDate" 
                                  Label="Estimated Harvest Date" 
                                  Variant="Variant.Outlined" 
                                  ReadOnly="true"
                                  HelperText="Auto-calculated: Register Date + 120 days" />
                </MudItem>
                <MudItem xs="6">
                    <MudDatePicker @bind-Date="actualHarvestDate" Label="Actual Harvest Date" Variant="Variant.Outlined" />
                </MudItem>
                
                <!-- Feed Brand Selection -->
                <MudItem xs="12">
                    <MudDivider DividerType="DividerType.FullWidth" />
                    <MudText Typo="Typo.h6" Class="mt-3 mb-2">Feed Brand Selection</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3">
                        Select a feed brand. All available formulas for the selected brand will be automatically assigned.
                    </MudText>
                </MudItem>

                <MudItem xs="12">
                    <MudSelect T="string"
                             @bind-Value="selectedBrand"
                             Label="Feed Brand"
                             Variant="Variant.Outlined"
                             Required="true">
                        <MudSelectItem T="string" Value="@((string?)null)">-- Select Brand --</MudSelectItem>
                        @foreach (var brand in availableBrands)
                        {
                            <MudSelectItem T="string" Value="@brand">@brand</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                @if (!string.IsNullOrEmpty(selectedBrand))
                {
                    <MudItem xs="12">
                        <MudAlert Severity="Severity.Info" Class="mt-2">
                            <MudText Typo="Typo.body2">
                                <strong>@selectedBrand</strong> brand selected. All available feed formulas for this brand will be automatically assigned when the pig pen is created.
                            </MudText>
                        </MudAlert>
                    </MudItem>
                }

                <!-- Note Section -->
                <MudItem xs="12">
                    <MudTextField @bind-Value="note" 
                                 Label="Note" 
                                 Variant="Variant.Outlined" 
                                 Lines="3"
                                 Placeholder="Enter any additional notes about this pig pen..." />
                </MudItem>
            </MudGrid>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                  Variant="Variant.Filled" 
                  OnClick="Submit"
                  Disabled="@(!IsFormValid())">
            Add Pig Pen
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;

    private List<Customer> customers = new();
    private List<string> availableBrands = new();
    private Guid? selectedCustomerId;
    private string penCode = "";
    private PigPenType selectedType = PigPenType.Project;
    private int pigQty = 1;
    private decimal depositPerPig = 1500m;
    private DateTime? registerDate = DateTime.Today;
    private DateTime? estimatedHarvestDate;
    private DateTime? actualHarvestDate;

    // Feed brand selection property
    private string? selectedBrand;
    
    // Note property
    private string? note;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
        await LoadAvailableBrands();
        
        // Calculate initial estimated harvest date based on default register date
        if (registerDate.HasValue)
        {
            estimatedHarvestDate = registerDate.Value.AddDays(120);
        }
    }

    private async Task LoadCustomers()
    {
        try
        {
            customers = await CustomerService.GetCustomersAsync();
        }
        catch
        {
            customers = new();
        }
    }

    private async Task LoadAvailableBrands()
    {
        try
        {
            var feedFormulas = await FeedFormulaService.GetAllFeedFormulasAsync();
            availableBrands = feedFormulas
                .Select(f => f.Brand ?? "")
                .Where(b => !string.IsNullOrEmpty(b))
                .Distinct()
                .OrderBy(b => b)
                .ToList();
        }
        catch
        {
            availableBrands = new();
        }
    }

    private void OnPigQuantityChanged(int newPigQty)
    {
        pigQty = newPigQty;
    }

    private void OnRegisterDateChanged(DateTime? newRegisterDate)
    {
        registerDate = newRegisterDate;
        
        // Automatically calculate estimated harvest date (register date + 120 days)
        if (newRegisterDate.HasValue)
        {
            estimatedHarvestDate = newRegisterDate.Value.AddDays(120);
            Console.WriteLine($"[OnRegisterDateChanged] Register date set to: {registerDate?.ToString("yyyy-MM-dd")}, Estimated harvest date automatically set to: {estimatedHarvestDate?.ToString("yyyy-MM-dd")}");
        }
        else
        {
            estimatedHarvestDate = null;
            Console.WriteLine($"[OnRegisterDateChanged] Register date cleared, estimated harvest date cleared");
        }
        
        StateHasChanged();
    }

    void Cancel() => MudDialog.Cancel();

    private bool IsFormValid()
    {
        return selectedCustomerId.HasValue &&
               !string.IsNullOrWhiteSpace(penCode) &&
               pigQty > 0 &&
               registerDate.HasValue &&
               !string.IsNullOrWhiteSpace(selectedBrand);
    }

    async Task Submit()
    {
        if (!IsFormValid())
            return;

        try
        {
            // Create the pig pen first
            var pigPenDto = new PigFarmManagement.Client.Features.PigPens.Services.PigPenCreateDto(
                selectedCustomerId!.Value,
                penCode,
                pigQty,
                registerDate!.Value,
                actualHarvestDate,
                estimatedHarvestDate,
                selectedType,
                selectedBrand, // Save the selected brand
                depositPerPig, // Custom deposit per pig amount
                note // Note
            );

            var createdPigPen = await PigPenService.CreatePigPenAsync(pigPenDto);

            // If a brand is selected, automatically assign all formulas for that brand
            if (!string.IsNullOrEmpty(selectedBrand))
            {
                var formulaAssignments = await CreateAutomaticFormulaAssignments(createdPigPen.Id, selectedBrand);
                if (formulaAssignments.Any())
                {
                    var pigPenWithAssignments = createdPigPen with
                    {
                        FormulaAssignments = formulaAssignments
                    };
                    createdPigPen = await PigPenService.UpdatePigPenAsync(pigPenWithAssignments);
                }
            }

            MudDialog.Close(DialogResult.Ok(createdPigPen));
        }
        catch
        {
            MudDialog.Cancel();
        }
    }

    private async Task<List<PigPenFormulaAssignment>> CreateAutomaticFormulaAssignments(Guid pigPenId, string brand)
    {
        try
        {
            // Get available formulas for the brand
            var formulas = await FeedFormulaCalculationService.GetFeedFormulasByBrandAsync(brand, pigQty);

            if (!formulas.Any())
                return new List<PigPenFormulaAssignment>();

            // Create assignments for all formulas that match the brand
            var assignments = new List<PigPenFormulaAssignment>();
            foreach (var formula in formulas)
            {
                var assignment = new PigPenFormulaAssignment(
                    Id: Guid.NewGuid(),
                    PigPenId: pigPenId,
                    OriginalFormulaId: formula.Id,
                    ProductCode: formula.ProductCode,
                    ProductName: formula.ProductName,
                    Brand: formula.Brand,
                    Stage: null, // Single formula, no stage
                    AssignedPigQuantity: pigQty,
                    AssignedBagPerPig: formula.BagPerPig,
                    AssignedTotalBags: formula.TotalBagsRequired,
                    AssignedAt: DateTime.Now,
                    EffectiveUntil: null, // Always effective
                    IsActive: true,
                    IsLocked: false,
                    LockReason: null,
                    LockedAt: null
                );
                assignments.Add(assignment);
            }

            return assignments;
        }
        catch
        {
            // If automatic assignment fails, return empty list (pig pen still created without formulas)
            return new List<PigPenFormulaAssignment>();
        }
    }
}
