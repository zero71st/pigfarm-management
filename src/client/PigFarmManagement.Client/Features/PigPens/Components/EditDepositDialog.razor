@using Microsoft.AspNetCore.Components
@using MudBlazor
@using PigFarmManagement.Shared.Models
@using PigFarmManagement.Client.Features.PigPens.Services
@inject IPigPenService PigPenService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-width: 500px;">
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-4">
                        <MudIcon Icon="Icons.Material.Filled.Edit" Class="mr-2" />
                        Edit Deposit
                    </MudText>
                </MudItem>
                
                <MudItem xs="12">
                    <MudNumericField @bind-Value="amount" 
                                   Label="Amount (฿)" 
                                   Variant="Variant.Outlined" 
                                   Required="true"
                                   Min="0.01m"
                                   Format="N2"
                                   Culture="@System.Globalization.CultureInfo.GetCultureInfo("th-TH")"
                                   HelperText="Enter the deposit amount in Thai Baht"
                                   Error="@(!IsAmountValid())"
                                   ErrorText="Amount must be greater than 0" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudDatePicker @bind-Date="depositDate" 
                                 Label="Deposit Date" 
                                 Variant="Variant.Outlined" 
                                 Required="true"
                                 MaxDate="DateTime.Today"
                                 HelperText="Select the date of deposit (cannot be future date)"
                                 Error="@(!IsDateValid())"
                                 ErrorText="Date is required and cannot be in the future" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField @bind-Value="remark" 
                                Label="Remark (Optional)" 
                                Variant="Variant.Outlined" 
                                Lines="3"
                                MaxLength="500"
                                Counter="500"
                                HelperText="Add any notes about this deposit" />
                </MudItem>
            </MudGrid>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                   Variant="Variant.Filled" 
                   OnClick="Submit"
                   Disabled="@(!IsFormValid() || isSubmitting)"
                   StartIcon="@(isSubmitting ? null : Icons.Material.Filled.Save)">
            @if (isSubmitting)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Updating...</MudText>
            }
            else
            {
                <MudText>Update Deposit</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public Deposit DepositToEdit { get; set; } = new Deposit(Guid.Empty, Guid.Empty, 0, DateTime.Today, null);

    private decimal amount;
    private DateTime? depositDate;
    private string remark = "";
    private bool isSubmitting = false;

    protected override void OnInitialized()
    {
        // Pre-populate form with existing deposit data
        if (DepositToEdit != null)
        {
            amount = DepositToEdit.Amount;
            depositDate = DepositToEdit.Date;
            remark = DepositToEdit.Remark ?? "";
        }
    }

    private bool IsAmountValid()
    {
        return amount > 0;
    }

    private bool IsDateValid()
    {
        return depositDate.HasValue && depositDate.Value <= DateTime.Today;
    }

    private bool IsFormValid()
    {
        return IsAmountValid() && IsDateValid();
    }

    void Cancel() => MudDialog.Cancel();

    async Task Submit()
    {
        if (!IsFormValid() || isSubmitting || DepositToEdit == null)
            return;

        try
        {
            isSubmitting = true;
            StateHasChanged();

            // Create updated deposit object
            var updatedDeposit = new Deposit(
                DepositToEdit.Id,
                DepositToEdit.PigPenId,
                amount,
                depositDate!.Value,
                string.IsNullOrWhiteSpace(remark) ? null : remark.Trim()
            );

            var result = await PigPenService.UpdateDepositAsync(updatedDeposit);
            
            Snackbar.Add($"Deposit updated successfully (฿{amount:N2})", Severity.Success);
            MudDialog.Close(DialogResult.Ok(result));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating deposit: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }
}