@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-width: 800px;">
            @if (summary == null)
            {
                <MudProgressCircular Indeterminate="true" />
                <MudText>Loading pen details...</MudText>
            }
            else
            {
                <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                    <MudTabPanel Text="Summary" Icon="@Icons.Material.Filled.Assessment">
                        <MudGrid>
                            <MudItem xs="12" md="6">
                                <MudCard>
                                    <MudCardContent>
                                        <MudText Typo="Typo.h6">Pen Information</MudText>
                                        <MudText><strong>Pen Code:</strong> @pigPen?.PenCode</MudText>
                                        <MudText><strong>Type:</strong> 
                                            <MudChip Color="@(pigPen?.Type == PigPenType.Cash ? Color.Success : Color.Info)" 
                                                     Size="Size.Small" Variant="Variant.Filled">
                                                @pigPen?.Type
                                            </MudChip>
                                        </MudText>
                                        <MudText><strong>Quantity:</strong> @pigPen?.PigQty pigs</MudText>
                                        <MudText><strong>Register Date:</strong> @pigPen?.RegisterDate.ToString("dd/MM/yyyy")</MudText>
                                        <MudText><strong>Actual Harvest Date:</strong> @pigPen?.ActHarvestDate?.ToString("dd/MM/yyyy")</MudText>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudCard>
                                    <MudCardContent>
                                        <MudText Typo="Typo.h6">Financial Summary</MudText>
                                        <MudText Color="Color.Primary"><strong>Feed Cost:</strong> ฿@summary.TotalFeedCost.ToString("N0")</MudText>
                                        <MudText Color="Color.Secondary"><strong>Total Deposits:</strong> ฿@summary.TotalDeposit.ToString("N0")</MudText>
                                        <MudText Color="Color.Info"><strong>Investment:</strong> ฿@summary.Investment.ToString("N0")</MudText>
                                        <MudText Color="@(summary.ProfitLoss >= 0 ? Color.Success : Color.Error)">
                                            <strong>Profit/Loss:</strong> ฿@summary.ProfitLoss.ToString("N0")
                                        </MudText>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        </MudGrid>
                    </MudTabPanel>

                    <MudTabPanel Text="Feed History" Icon="@Icons.Material.Filled.Fastfood">
                        <!-- Feed Progress Summary Cards -->
                        @if (feedProgress != null)
                        {
                            <MudGrid Class="mb-4">
                                <MudItem xs="12" md="6">
                                    <MudCard Elevation="3">
                                        <MudCardContent>
                                            <MudText Typo="Typo.h6" Class="mb-2">Feed Formula vs Actual</MudText>
                                            @if (feedProgress.FeedFormula != null)
                                            {
                                                <MudText Class="mb-2"><strong>Formula:</strong> @feedProgress.FeedFormula.DisplayName</MudText>
                                                <MudText Class="mb-2"><strong>Rate:</strong> @feedProgress.FeedFormula.ConsumptionRate</MudText>
                                            }
                                            else
                                            {
                                                <MudText Color="Color.Warning" Class="mb-2">⚠️ No feed formula assigned</MudText>
                                            }
                                            
                                            <MudProgressLinear Value="@((double)feedProgress.Progress.PercentageComplete)" 
                                                             Max="120" 
                                                             Color="@GetProgressColor(feedProgress.Progress)" 
                                                             Class="mb-2" />
                                            <MudText Typo="Typo.body2" Class="mb-1">
                                                <strong>Progress:</strong> @feedProgress.Progress.PercentageComplete.ToString("F1")% - @feedProgress.Progress.Status
                                            </MudText>
                                            <MudText Typo="Typo.body2">
                                                <strong>Required:</strong> @feedProgress.Progress.RequiredBags.ToString("F1") bags | 
                                                <strong>Actual:</strong> @feedProgress.Progress.ActualBags.ToString("F1") bags
                                            </MudText>
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudCard Elevation="3">
                                        <MudCardContent>
                                            <MudText Typo="Typo.h6" Class="mb-2">Feed Status</MudText>
                                            <MudChip Color="@GetStatusColor(feedProgress.Progress)" 
                                                     Size="Size.Medium" 
                                                     Variant="Variant.Filled" 
                                                     Class="mb-2">
                                                @feedProgress.Progress.Status
                                            </MudChip>
                                            <br />
                                            @if (feedProgress.Progress.IsOverFeeding)
                                            {
                                                <MudText Color="Color.Warning" Typo="Typo.body2" Class="mb-1">
                                                    ⚠️ Over-feeding detected
                                                </MudText>
                                            }
                                            @if (feedProgress.Progress.IsOnTrack)
                                            {
                                                <MudText Color="Color.Success" Typo="Typo.body2" Class="mb-1">
                                                    ✅ Feed consumption on track
                                                </MudText>
                                            }
                                            <MudText Typo="Typo.body2">
                                                <strong>Total Records:</strong> @feeds.Count feeds
                                            </MudText>
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>
                            </MudGrid>
                        }

                        <div class="d-flex justify-end mb-4">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                                       StartIcon="Icons.Material.Filled.Upload" OnClick="AddFeed">
                                Import Feeds
                            </MudButton>
                        </div>

                        <!-- Simple Feed Table -->
                        <MudTable Items="@feeds" Hover="true" Striped="true">
                            <HeaderContent>
                                <MudTh>Date</MudTh>
                                <MudTh>Product</MudTh>
                                <MudTh>Invoice</MudTh>
                                <MudTh>Invoice Ref</MudTh>
                                <MudTh>Quantity (Kg)</MudTh>
                                <MudTh>Bags</MudTh>
                                <MudTh>Price per Kg</MudTh>
                                <MudTh>Total Cost</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.Date.ToString("dd/MM/yyyy")</MudTd>
                                <MudTd>
                                    @context.ProductName
                                    @if (!string.IsNullOrEmpty(context.ProductCode))
                                    {
                                        <br/>@context.ProductCode
                                    }
                                </MudTd>
                                <MudTd>@context.InvoiceNumber</MudTd>
                                <MudTd>
                                    @if (!string.IsNullOrEmpty(context.InvoiceReferenceCode))
                                    {
                                        <MudChip Color="Color.Primary" Size="Size.Small">@context.InvoiceReferenceCode</MudChip>
                                    }
                                    else
                                    {
                                        <span class="text-muted">-</span>
                                    }
                                </MudTd>
                                <MudTd>@context.QuantityKg.ToString("N1")</MudTd>
                                <MudTd>@((context.QuantityKg / 25m).ToString("N2"))</MudTd>
                                <MudTd>฿@context.PricePerKg.ToString("N2")</MudTd>
                                <MudTd>฿@context.Cost.ToString("N2")</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudTabPanel>

                    <MudTabPanel Text="Deposits" Icon="Icons.Material.Filled.AccountBalance">
                        <div class="d-flex justify-end mb-4">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                                       StartIcon="Icons.Material.Filled.Add" OnClick="AddDeposit">
                                Add Deposit
                            </MudButton>
                        </div>
                        <MudTable Items="@deposits" Hover="true" Striped="true">
                            <HeaderContent>
                                <MudTh>Date</MudTh>
                                <MudTh>Amount</MudTh>
                                <MudTh>Notes</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.Date.ToString("dd/MM/yyyy")</MudTd>
                                <MudTd>฿@context.Amount.ToString("N2")</MudTd>
                                <MudTd>@context.Remark</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudTabPanel>

                    <MudTabPanel Text="Harvest" Icon="Icons.Material.Filled.Agriculture">
                        <div class="d-flex justify-end mb-4">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                                       StartIcon="Icons.Material.Filled.Add" OnClick="AddHarvest">
                                Add Harvest
                            </MudButton>
                        </div>
                        <MudTable Items="@harvests" Hover="true" Striped="true">
                            <HeaderContent>
                                <MudTh>Date</MudTh>
                                <MudTh>Pigs Sold</MudTh>
                                <MudTh>Avg Weight</MudTh>
                                <MudTh>Price per Kg</MudTh>
                                <MudTh>Total Revenue</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>@context.HarvestDate.ToString("dd/MM/yyyy")</MudTd>
                                <MudTd>@context.PigCount</MudTd>
                                <MudTd>@context.AvgWeight.ToString("N1") kg</MudTd>
                                <MudTd>฿@context.SalePricePerKg.ToString("N2")</MudTd>
                                <MudTd>฿@context.Revenue.ToString("N2")</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudTabPanel>
                </MudTabs>
            }
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="OnClose">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    [Parameter] public Guid PigPenId { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private PigPen? pigPen;
    private PigPenSummary? summary;
    private FeedProgressSummary? feedProgress;
    private List<FeedItem> feeds = new();
    private List<Deposit> deposits = new();
    private List<HarvestResult> harvests = new();

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            summary = await Http.GetFromJsonAsync<PigPenSummary>($"/api/pigpens/{PigPenId}/summary");
            feeds = await Http.GetFromJsonAsync<List<FeedItem>>($"/api/pigpens/{PigPenId}/feeds") ?? new();
            deposits = await Http.GetFromJsonAsync<List<Deposit>>($"/api/pigpens/{PigPenId}/deposits") ?? new();
            harvests = await Http.GetFromJsonAsync<List<HarvestResult>>($"/api/pigpens/{PigPenId}/harvests") ?? new();
            
            // Load feed progress data
            feedProgress = await Http.GetFromJsonAsync<FeedProgressSummary>($"/api/pigpens/{PigPenId}/feed-progress/summary");
            
            // Get pen details from current list or API call
            var pigPens = await Http.GetFromJsonAsync<List<PigPen>>("/api/pigpens") ?? new();
            pigPen = pigPens.FirstOrDefault(p => p.Id == PigPenId);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
    }

    private Color GetProgressColor(FeedProgress progress)
    {
        if (progress.PercentageComplete < 50) return Color.Error;
        if (progress.PercentageComplete < 80) return Color.Warning;
        if (progress.PercentageComplete <= 110) return Color.Success;
        return Color.Error; // Over-feeding
    }

    private Color GetStatusColor(FeedProgress progress)
    {
        return progress.Status switch
        {
            "Under-fed" => Color.Error,
            "Below target" => Color.Warning,
            "On track" => Color.Success,
            "Over-feeding" => Color.Warning,
            "Severely over-feeding" => Color.Error,
            _ => Color.Info
        };
    }

    private async void AddFeed()
    {
        try
        {
            if (pigPen == null)
            {
                Snackbar.Add("Pig pen information not loaded yet", Severity.Warning);
                return;
            }

            // Get customer information
            var customers = await Http.GetFromJsonAsync<List<Customer>>("/api/customers") ?? new();
            var customer = customers.FirstOrDefault(c => c.Id == pigPen.CustomerId);
            
            if (customer == null)
            {
                Snackbar.Add("Customer information not found", Severity.Error);
                return;
            }

            var parameters = new DialogParameters<PigPenPosImportDialog>
            {
                { x => x.PigPenId, PigPenId },
                { x => x.CustomerDisplayName, customer.DisplayName },
                { x => x.PenCode, pigPen.PenCode },
                { x => x.CustomerCode, customer.Code }
            };

            var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Large,
                FullWidth = true,
                CloseButton = true,
                DisableBackdropClick = true
            };

            var dialog = await DialogService.ShowAsync<PigPenPosImportDialog>("Import POSPOS Feeds", parameters, options);
            var result = await dialog.Result;

            if (!result.Canceled && result.Data != null)
            {
                // Refresh feed data after successful import
                await LoadData();
                Snackbar.Add("Feed data refreshed after import", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error opening import dialog: {ex.Message}", Severity.Error);
        }
    }

    private void AddDeposit()
    {
        Snackbar.Add("Deposit dialog not implemented yet", Severity.Info);
    }

    private void AddHarvest()
    {
        Snackbar.Add("Harvest dialog not implemented yet", Severity.Info);
    }
}
