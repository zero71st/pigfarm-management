@using Microsoft.AspNetCore.Components
@using MudBlazor
@using PigFarmManagement.Shared.Models
@using PigFarmManagement.Client.Features.PigPens.Services
@inject IPigPenService PigPenService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-width: 500px;">
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-4">
                        <MudIcon Icon="Icons.Material.Filled.AccountBalance" Class="mr-2" />
                        Add New Deposit
                    </MudText>
                </MudItem>
                
                <!-- Deposit Calculation Info Card -->
                @if (calculationInfo != null)
                {
                    <MudItem xs="12">
                        <MudCard Class="mb-4" Style="background-color: #f8f9fa;">
                            <MudCardContent>
                                <MudGrid>
                                    <MudItem xs="12">
                                        <MudText Typo="Typo.subtitle2" Class="mb-2">
                                            ðŸ’° Deposit Information
                                        </MudText>
                                    </MudItem>
                                    <MudItem xs="6">
                                        <MudText Typo="Typo.body2" Class="text-muted">
                                            Expected Total:
                                        </MudText>
                                        <MudText Typo="Typo.body1" Style="font-weight: 600;">
                                            @calculationInfo.ExpectedTotalDepositFormatted
                                        </MudText>
                                        <MudText Typo="Typo.caption" Class="text-muted">
                                            (@calculationInfo.PigQuantity pigs Ã— @calculationInfo.DepositPerPigFormatted)
                                        </MudText>
                                    </MudItem>
                                    <MudItem xs="6">
                                        <MudText Typo="Typo.body2" Class="text-muted">
                                            Current Total:
                                        </MudText>
                                        <MudText Typo="Typo.body1" Style="font-weight: 600;">
                                            @calculationInfo.CurrentTotalDepositsFormatted
                                        </MudText>
                                        <MudText Typo="Typo.caption" Class="text-muted">
                                            (@calculationInfo.CompletionPercentageFormatted complete)
                                        </MudText>
                                    </MudItem>
                                    <MudItem xs="12">
                                        <MudDivider Class="my-2" />
                                        <MudText Typo="Typo.body2" Class="text-muted">
                                            Remaining Needed:
                                        </MudText>
                                        <MudText Typo="Typo.h6" Style="@($"color: {GetRemainingAmountColor()}")">
                                            @calculationInfo.RemainingDepositFormatted
                                        </MudText>
                                        @if (calculationInfo.RemainingDeposit == 0)
                                        {
                                            <MudText Typo="Typo.caption" Style="color: #4caf50;">
                                                âœ… Deposit requirement fulfilled
                                            </MudText>
                                        }
                                    </MudItem>
                                </MudGrid>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
                
                <MudItem xs="12">
                    <MudNumericField @bind-Value="amount" 
                                   Label="Amount (à¸¿)" 
                                   Variant="Variant.Outlined" 
                                   Required="true"
                                   Min="0.01m"
                                   Format="N2"
                                   Culture="@System.Globalization.CultureInfo.GetCultureInfo("th-TH")"
                                   HelperText="Enter the deposit amount in Thai Baht"
                                   Error="@(!IsAmountValid())"
                                   ErrorText="Amount must be greater than 0" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudDatePicker @bind-Date="depositDate" 
                                 Label="Deposit Date" 
                                 Variant="Variant.Outlined" 
                                 Required="true"
                                 MaxDate="DateTime.Today"
                                 HelperText="Select the date of deposit (cannot be future date)"
                                 Error="@(!IsDateValid())"
                                 ErrorText="Date is required and cannot be in the future" />
                </MudItem>
                
                <MudItem xs="12">
                    <MudTextField @bind-Value="remark" 
                                Label="Remark (Optional)" 
                                Variant="Variant.Outlined" 
                                Lines="3"
                                MaxLength="500"
                                Counter="500"
                                HelperText="Add any notes about this deposit" />
                </MudItem>
            </MudGrid>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                   Variant="Variant.Filled" 
                   OnClick="Submit"
                   Disabled="@(!IsFormValid() || isSubmitting)"
                   StartIcon="@(isSubmitting ? null : Icons.Material.Filled.Save)">
            @if (isSubmitting)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Adding...</MudText>
            }
            else
            {
                <MudText>Add Deposit</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public Guid PigPenId { get; set; }
    [Parameter] public PigPen? PigPen { get; set; }
    [Parameter] public List<Deposit>? CurrentDeposits { get; set; }

    private decimal amount = 0;
    private DateTime? depositDate = DateTime.Today;
    private string remark = "";
    private bool isSubmitting = false;
    private DepositCalculationInfo? calculationInfo;

    protected override void OnInitialized()
    {
        // Set default date to today
        depositDate = DateTime.Today;
        
        // Calculate deposit information if pig pen and deposits are provided
        if (PigPen != null && CurrentDeposits != null)
        {
            calculationInfo = DepositCalculationInfo.Create(PigPen, CurrentDeposits);
        }
    }

    private string GetRemainingAmountColor()
    {
        if (calculationInfo == null) return "#666";
        
        return calculationInfo.RemainingDeposit switch
        {
            0 => "#4caf50", // Green - complete
            > 0 when calculationInfo.CompletionPercentage >= 0.5m => "#ff9800", // Orange - partial
            _ => "#f44336" // Red - needs attention
        };
    }

    private bool IsAmountValid()
    {
        return amount > 0;
    }

    private bool IsDateValid()
    {
        return depositDate.HasValue && depositDate.Value <= DateTime.Today;
    }

    private bool IsFormValid()
    {
        return IsAmountValid() && IsDateValid();
    }

    void Cancel() => MudDialog.Cancel();

    async Task Submit()
    {
        if (!IsFormValid() || isSubmitting)
            return;

        try
        {
            isSubmitting = true;
            StateHasChanged();

            var depositDto = new DepositCreateDto(
                amount,
                depositDate!.Value,
                string.IsNullOrWhiteSpace(remark) ? null : remark.Trim()
            );

            var createdDeposit = await PigPenService.AddDepositAsync(PigPenId, depositDto);
            
            Snackbar.Add($"Deposit of à¸¿{amount:N2} added successfully", Severity.Success);
            MudDialog.Close(DialogResult.Ok(createdDeposit));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding deposit: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }
}