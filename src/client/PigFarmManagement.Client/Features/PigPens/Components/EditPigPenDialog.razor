@using Microsoft.AspNetCore.Components
@using MudBlazor
@using PigFarmManagement.Shared.Models
@using PigFarmManagement.Client.Features.Customers.Services
@using PigFarmManagement.Client.Features.PigPens.Services
@using PigFarmManagement.Client.Features.FeedFormulas.Services
@using PigFarmManagement.Shared
@inject ICustomerService CustomerService
@inject IPigPenService PigPenService
@inject IFeedFormulaCalculationService FeedFormulaCalculationService
@inject IFeedFormulaService FeedFormulaService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudContainer Style="max-width: 500px;">
            <MudGrid>
                <MudItem xs="12">
                    <MudSelect T="Guid?" @bind-Value="selectedCustomerId" Label="Customer" Variant="Variant.Outlined" Required="true">
                        <MudSelectItem T="Guid?" Value="@((Guid?)null)">-- Select Customer --</MudSelectItem>
                        @foreach (var customer in customers)
                        {
                            <MudSelectItem T="Guid?" Value="@((Guid?)customer.Id)">@customer.Name (@customer.Status)</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="penCode" Label="Pen Code" Variant="Variant.Outlined" Required="true" />
                </MudItem>
                <MudItem xs="12">
                    <MudSelect T="PigPenType" @bind-Value="selectedType" Label="Pig Pen Type" Variant="Variant.Outlined" Required="true">
                        <MudSelectItem T="PigPenType" Value="PigPenType.Cash">Cash</MudSelectItem>
                        <MudSelectItem T="PigPenType" Value="PigPenType.Project">Project</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="6">
                    <MudNumericField Value="pigQty" 
                                   ValueChanged="@((int value) => OnPigQuantityChanged(value))"
                                   Label="Pig Quantity" 
                                   Variant="Variant.Outlined" 
                                   Min="1" 
                                   Required="true" />
                </MudItem>
                <MudItem xs="6">
                    <MudNumericField @bind-Value="depositPerPig" 
                                   Label="Deposit Per Pig (บาท)" 
                                   Variant="Variant.Outlined" 
                                   Min="0" 
                                   Step="100"
                                   Format="N0"
                                   Required="true" 
                                   Adornment="Adornment.End" 
                                   AdornmentText="฿" />
                </MudItem>
                <MudItem xs="6">
                    <MudDatePicker Date="registerDate" 
                                  DateChanged="@OnRegisterDateChanged"
                                  Label="Register Date" 
                                  Variant="Variant.Outlined" 
                                  Required="true" />
                </MudItem>
                <MudItem xs="6">
                    <MudDatePicker @bind-Date="actualHarvestDate" Label="Actual Harvest Date" Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="6">
                    <MudDatePicker @bind-Date="estimatedHarvestDate" Label="Estimated Harvest Date" Variant="Variant.Outlined" />
                </MudItem>
                
                <!-- Feed Brand Selection -->
                <MudItem xs="12">
                    <MudDivider DividerType="DividerType.FullWidth" />
                    <MudText Typo="Typo.h6" Class="mt-3 mb-2">Feed Brand Selection</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-3">
                        Select a feed brand. All available formulas for the selected brand will be automatically assigned.
                    </MudText>
                </MudItem>

                <MudItem xs="12">
                    <MudSelect T="string"
                             @bind-Value="selectedBrand"
                             Label="Feed Brand"
                             Variant="Variant.Outlined"
                             Required="true">
                        <MudSelectItem T="string" Value="@((string?)null)">-- Select Brand --</MudSelectItem>
                        <MudSelectItem T="string" Value="@JetBrand">@JetBrand</MudSelectItem>
                        <MudSelectItem T="string" Value="@PureBrand">@PureBrand</MudSelectItem>
                    </MudSelect>
                </MudItem>

                @if (!string.IsNullOrEmpty(selectedBrand))
                {
                    <MudItem xs="12">
                        <MudAlert Severity="Severity.Info" Class="mt-2">
                            <MudText Typo="Typo.body2">
                                <strong>@selectedBrand</strong> brand selected. All available feed formulas for this brand will be automatically assigned when the pig pen is updated.
                            </MudText>
                        </MudAlert>
                    </MudItem>
                }
            </MudGrid>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Save" Disabled="@(!IsFormValid())">
            Update Pig Pen
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public PigPen PigPen { get; set; } = default!;

    private List<Customer> customers = new();
    private Guid? selectedCustomerId;
    private string penCode = "";
    private PigPenType selectedType = PigPenType.Cash;
    private int pigQty = 1;
    private decimal depositPerPig = 1500m;
    private DateTime? registerDate = DateTime.Today;
    private DateTime? actualHarvestDate;
    private DateTime? estimatedHarvestDate;
    
    // Feed brand selection property
    private string? selectedBrand;

    // Brand constants
    private const string JetBrand = "เจ็ท";
    private const string PureBrand = "เพียว";

    protected override async Task OnInitializedAsync()
    {
        customers = await CustomerService.GetCustomersAsync();
        
        // Populate form with existing pig pen data
        selectedCustomerId = PigPen.CustomerId;
        penCode = PigPen.PenCode;
        selectedType = PigPen.Type;
        pigQty = PigPen.PigQty;
        depositPerPig = PigPen.DepositPerPig;
        registerDate = PigPen.RegisterDate;
        actualHarvestDate = PigPen.ActHarvestDate;
        estimatedHarvestDate = PigPen.EstimatedHarvestDate;
        
        // Initialize feed brand selection based on existing data
        InitializeFeedBrandSelection();
    }

    private void InitializeFeedBrandSelection()
    {
        // First, try to get the brand from the pig pen's SelectedBrand property
        if (!string.IsNullOrEmpty(PigPen.SelectedBrand))
        {
            selectedBrand = PigPen.SelectedBrand;
            Console.WriteLine($"[EditPigPen - InitializeFeedBrandSelection] Found saved brand: {selectedBrand}");
            return;
        }
        
        // Fallback: Try to get the brand from existing formula assignments if available
        var activeAssignment = PigPen.FormulaAssignments.FirstOrDefault(fa => fa.IsActive && !fa.IsLocked);
        if (activeAssignment != null)
        {
            selectedBrand = activeAssignment.Brand;
            Console.WriteLine($"[EditPigPen - InitializeFeedBrandSelection] Found existing formula assignment brand: {selectedBrand}");
            return;
        }
        
        // Final fallback: Auto-select Jet brand as default
        Console.WriteLine($"[EditPigPen - InitializeFeedBrandSelection] No saved brand information. Auto-selecting default brand: {JetBrand}");
        selectedBrand = JetBrand; // Default to เจ็ท brand
    }



    private void OnPigQuantityChanged(int newPigQty)
    {
        pigQty = newPigQty;
        Console.WriteLine($"[EditPigPen - OnPigQuantityChanged] Pig quantity changed to: {pigQty}");
    }

    private void OnRegisterDateChanged(DateTime? newRegisterDate)
    {
        registerDate = newRegisterDate;
        
        // Automatically calculate estimated harvest date (register date + 120 days)
        if (newRegisterDate.HasValue)
        {
            estimatedHarvestDate = newRegisterDate.Value.AddDays(120);
            Console.WriteLine($"[EditPigPen - OnRegisterDateChanged] Register date set to: {registerDate?.ToString("yyyy-MM-dd")}, Estimated harvest date automatically set to: {estimatedHarvestDate?.ToString("yyyy-MM-dd")}");
        }
        else
        {
            estimatedHarvestDate = null;
            Console.WriteLine($"[EditPigPen - OnRegisterDateChanged] Register date cleared, estimated harvest date cleared");
        }
        
        StateHasChanged();
    }

    private bool IsFormValid()
    {
        return selectedCustomerId.HasValue && 
               !string.IsNullOrWhiteSpace(penCode) && 
               pigQty > 0 && 
               registerDate.HasValue;
    }

    private async Task Save()
    {
        if (!IsFormValid() || !selectedCustomerId.HasValue || !registerDate.HasValue)
            return;

        var updatedPigPen = PigPen with
        {
            CustomerId = selectedCustomerId.Value,
            PenCode = penCode,
            Type = selectedType,
            PigQty = pigQty,
            DepositPerPig = depositPerPig,
            RegisterDate = registerDate.Value,
            ActHarvestDate = actualHarvestDate,
            EstimatedHarvestDate = estimatedHarvestDate,
            SelectedBrand = selectedBrand // Save the selected brand
        };

        try
        {
            // If a brand is selected, automatically assign all formulas for that brand
            if (!string.IsNullOrEmpty(selectedBrand))
            {
                var formulaAssignments = await CreateAutomaticFormulaAssignments(updatedPigPen.Id, selectedBrand);
                if (formulaAssignments.Any())
                {
                    updatedPigPen = updatedPigPen with
                    {
                        FormulaAssignments = formulaAssignments
                    };
                }
            }

            await PigPenService.UpdatePigPenAsync(updatedPigPen);
            MudDialog.Close(DialogResult.Ok(updatedPigPen));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating pig pen: {ex.Message}", Severity.Error);
        }
    }

    private async Task<List<PigPenFormulaAssignment>> CreateAutomaticFormulaAssignments(Guid pigPenId, string brand)
    {
        try
        {
            // Get available formulas for the brand
            var formulas = await FeedFormulaCalculationService.GetFeedFormulasByBrandAsync(brand, pigQty);

            if (!formulas.Any())
                return new List<PigPenFormulaAssignment>();

            // Create assignments for all formulas that match the brand
            var assignments = new List<PigPenFormulaAssignment>();
            foreach (var formula in formulas)
            {
                var assignment = new PigPenFormulaAssignment(
                    Id: Guid.NewGuid(),
                    PigPenId: pigPenId,
                    OriginalFormulaId: formula.Id,
                    ProductCode: formula.ProductCode,
                    ProductName: formula.ProductName,
                    Brand: formula.Brand,
                    Stage: null, // Single formula, no stage
                    AssignedPigQuantity: pigQty,
                    AssignedBagPerPig: formula.BagPerPig,
                    AssignedTotalBags: formula.TotalBagsRequired,
                    AssignedAt: DateTime.Now,
                    EffectiveUntil: null, // Always effective
                    IsActive: true,
                    IsLocked: false,
                    LockReason: null,
                    LockedAt: null
                );
                assignments.Add(assignment);
            }

            return assignments;
        }
        catch
        {
            // If automatic assignment fails, return empty list (pig pen still updated without formulas)
            return new List<PigPenFormulaAssignment>();
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
