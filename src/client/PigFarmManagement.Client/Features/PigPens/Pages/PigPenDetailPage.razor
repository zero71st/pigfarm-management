@page "/pigpens/{pigPenId:guid}/detail"
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@using PigFarmManagement.Client.Features.FeedFormulas.Services
@inject IFeedFormulaCalculationService FeedFormulaCalculationService

<PageTitle>Pig Pen Detail</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-6">
    @if (loading)
    {
        <div class="d-flex justify-center align-center" style="min-height: 400px;">
            <MudProgressCircular Indeterminate="true" Size="Size.Large" />
            <MudText Class="ml-4" Typo="Typo.h6">Loading pig pen details...</MudText>
        </div>
    }
    else if (pigPen == null)
    {
        <MudAlert Severity="Severity.Error">
            <MudText Typo="Typo.h6">Pig pen not found</MudText>
            <MudText>The requested pig pen could not be found.</MudText>
        </MudAlert>
    }
    else
    {
        <!-- Header Section -->
        <div class="d-flex justify-space-between align-center mb-6">
            <div>
                <MudText Typo="Typo.h3" GutterBottom="true">
                    <MudIcon Icon="Icons.Material.Filled.Widgets" Class="mr-3" />
                    @pigPen.Name
                </MudText>
                <MudBreadcrumbs Items="@breadcrumbItems" />
            </div>
            <div>
                <MudButton Variant="Variant.Outlined" 
                           StartIcon="Icons.Material.Filled.ArrowBack"
                           OnClick="@(() => Navigation.NavigateTo("/pigpens"))"
                           Class="mr-2">
                    Back to List
                </MudButton>
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary"
                           StartIcon="Icons.Material.Filled.Edit"
                           OnClick="EditPigPen">
                    Edit
                </MudButton>
            </div>
        </div>

        <!-- Section 1: Pig Pen Details -->
        <MudCard Elevation="2" Class="mb-6">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">
                        <MudIcon Icon="Icons.Material.Filled.Info" Class="mr-2" />
                        Pig Pen Information
                    </MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudSimpleTable Style="overflow-x: auto;" Dense="true">
                            <tbody>
                                <tr>
                                    <td><strong>Pen Code:</strong></td>
                                    <td>@pigPen.PenCode</td>
                                </tr>
                                <tr>
                                    <td><strong>Type:</strong></td>
                                    <td>
                                        <MudChip Color="@(pigPen.Type == PigPenType.Cash ? Color.Success : Color.Info)" 
                                                 Size="Size.Small" Variant="Variant.Filled">
                                            @pigPen.Type
                                        </MudChip>
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>Quantity:</strong></td>
                                    <td>@pigPen.PigQty pigs</td>
                                </tr>
                                <tr>
                                    <td><strong>Register Date:</strong></td>
                                    <td>@pigPen.RegisterDate.ToString("dd/MM/yyyy")</td>
                                </tr>
                                <tr>
                                    <td><strong>Actual Harvest Date:</strong></td>
                                    <td>@(pigPen.ActHarvestDate?.ToString("dd/MM/yyyy") ?? "Ongoing")</td>
                                </tr>
                                <tr>
                                    <td><strong>Est. Harvest:</strong></td>
                                    <td>@(pigPen.EstimatedHarvestDate?.ToString("dd/MM/yyyy") ?? "Not set")</td>
                                </tr>
                            </tbody>
                        </MudSimpleTable>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        @if (summary != null)
                        {
                            <MudSimpleTable Style="overflow-x: auto;" Dense="true">
                                <tbody>
                                    <tr>
                                        <td><strong>Feed Cost:</strong></td>
                                        <td class="text-right">
                                            <MudText Color="Color.Primary">฿@summary.TotalFeedCost.ToString("N0")</MudText>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td><strong>Total Deposits:</strong></td>
                                        <td class="text-right">
                                            <MudText Color="Color.Secondary">฿@summary.TotalDeposit.ToString("N0")</MudText>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td><strong>Investment:</strong></td>
                                        <td class="text-right">
                                            <MudText Color="Color.Info">฿@summary.Investment.ToString("N0")</MudText>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td><strong>Profit/Loss:</strong></td>
                                        <td class="text-right">
                                            <MudText Color="@(summary.ProfitLoss >= 0 ? Color.Success : Color.Error)">
                                                ฿@summary.ProfitLoss.ToString("N0")
                                            </MudText>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td><strong>Net Balance:</strong></td>
                                        <td class="text-right">
                                            <MudText Color="@(summary.NetBalance >= 0 ? Color.Success : Color.Warning)">
                                                ฿@summary.NetBalance.ToString("N0")
                                            </MudText>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td><strong>ROI:</strong></td>
                                        <td class="text-right">
                                            <MudText Color="@(summary.ROI >= 0 ? Color.Success : Color.Error)">
                                                @summary.ROI.ToString("N1")%
                                            </MudText>
                                        </td>
                                    </tr>
                                </tbody>
                            </MudSimpleTable>
                        }
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>

        <!-- Section 2: Deposits List -->
        <MudCard Elevation="2" Class="mb-6">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">
                        <MudIcon Icon="Icons.Material.Filled.AccountBalance" Class="mr-2" />
                        Deposits (@deposits.Count)
                    </MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary"
                               StartIcon="Icons.Material.Filled.Add"
                               OnClick="AddDeposit">
                        Add Deposit
                    </MudButton>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                @if (deposits.Any())
                {
                    <MudTable Items="@deposits" Hover="true" Striped="true" Dense="true">
                        <HeaderContent>
                            <MudTh>Date</MudTh>
                            <MudTh Style="text-align: right">Amount</MudTh>
                            <MudTh>Notes</MudTh>
                            <MudTh Style="text-align: center">Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Date">@context.Date.ToString("dd/MM/yyyy")</MudTd>
                            <MudTd DataLabel="Amount" Style="text-align: right">
                                <MudText Color="Color.Success"><strong>฿@context.Amount.ToString("N2")</strong></MudText>
                            </MudTd>
                            <MudTd DataLabel="Notes">@(context.Remark ?? "-")</MudTd>
                            <MudTd DataLabel="Actions" Style="text-align: center">
                                <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                                    <MudIconButton Icon="Icons.Material.Filled.Edit" 
                                                   Color="Color.Primary" 
                                                   Size="Size.Small"
                                                   OnClick="@(() => EditDeposit(context))" />
                                    <MudIconButton Icon="Icons.Material.Filled.Delete" 
                                                   Color="Color.Error" 
                                                   Size="Size.Small"
                                                   OnClick="@(() => DeleteDeposit(context))" />
                                </MudButtonGroup>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
                else
                {
                    <MudAlert Severity="Severity.Info">
                        <MudText>No deposits recorded for this pig pen.</MudText>
                    </MudAlert>
                }
            </MudCardContent>
        </MudCard>

        <!-- Section 3: Feed History -->
        <MudCard Elevation="2" Class="mb-6">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">
                        <MudIcon Icon="Icons.Material.Filled.Fastfood" Class="mr-2" />
                        Feed History (@feeds.Count)
                    </MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary"
                               StartIcon="Icons.Material.Filled.Download"
                               OnClick="ImportFeeds">
                        Import Feeds
                    </MudButton>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <!-- Always show debug info and comparison section -->
                <MudDivider Class="my-4" />
                <MudText Typo="Typo.h6" Class="mb-3">
                    <MudIcon Icon="Icons.Material.Filled.Compare" Class="mr-2" />
                    Feed Formula vs Actual Feed History Comparison
                </MudText>
                <MudText Typo="Typo.body2" Class="mb-3" Color="Color.Secondary">
                    Total Pigs: @(pigPen?.CurrentPigCount ?? 0)
                </MudText>

                <!-- Debug Information -->
                <MudAlert Severity="Severity.Info" Class="mb-3">
                    <div>
                        <MudText>Debug Info:</MudText>
                        <MudText>Feeds count: @feeds.Count</MudText>
                        <MudText>Feed formulas count: @(feedFormulaCalculations?.Count() ?? 0)</MudText>
                        <MudText>Comparison data count: @(comparisonData?.Count ?? 0)</MudText>
                        <MudText>Table rows count: @GetTableRows().Count</MudText>
                        <MudText>Pig pen brand: "@(pigPen?.SelectedBrand ?? "NULL")"</MudText>
                        <MudText>Pig pen pig count: @(pigPen?.PigQty ?? 0)</MudText>
                        <MudText>Pig pen ID: @(pigPen?.Id.ToString() ?? "NULL")</MudText>
                    </div>
                </MudAlert>

                <!-- Quick Brand Test -->
                @if (pigPen != null && string.IsNullOrEmpty(pigPen.SelectedBrand))
                {
                    <MudAlert Severity="Severity.Warning" Class="mb-3">
                        <MudText><strong>Issue:</strong> This pig pen doesn't have a feed formula brand selected.</MudText>
                        <MudText>Please edit the pig pen and select a brand to enable feed formula comparison.</MudText>
                        <MudButton StartIcon="Icons.Material.Filled.Edit" 
                                  Color="Color.Primary" 
                                  Variant="Variant.Filled" 
                                  Class="mt-2"
                                  OnClick="@(() => Snackbar.Add("Go to Pig Pens page and click Edit to select a brand", Severity.Info))">
                            How to Fix
                        </MudButton>
                    </MudAlert>
                }

                <!-- Show feed status -->
                @if (feeds.Any())
                {
                    <MudText Class="mb-3" Color="Color.Success">✓ Found @feeds.Count feed records for this pig pen.</MudText>
                }
                else
                {
                    <MudAlert Severity="Severity.Info" Class="mb-3">
                        <MudText>No feed records found for this pig pen. The comparison will show formula data only.</MudText>
                    </MudAlert>
                }

                <!-- Table matching the provided image structure -->
                @if (feedFormulaCalculations != null && feedFormulaCalculations.Any())
                {
                    <MudTable Items="@GetTableRows()" Dense="true" Hover="false" Striped="false" 
                             FixedHeader="true" Class="comparison-table" Style="border-collapse: collapse;">
                        <HeaderContent>
                            <MudTh Style="border: 1px solid #000; text-align: center; font-weight: bold; padding: 8px; background-color: #f8f9fa;">Product Code</MudTh>
                            <MudTh Style="border: 1px solid #000; text-align: center; font-weight: bold; padding: 8px; background-color: #f8f9fa;">Product Name</MudTh>
                            <MudTh Style="border: 1px solid #000; text-align: center; font-weight: bold; padding: 8px; background-color: #e3f2fd;" colspan="2">Feed Formula</MudTh>
                            <MudTh Style="border: 1px solid #000; text-align: center; font-weight: bold; padding: 8px; background-color: #e8f5e8;" colspan="2">Feed History</MudTh>
                        </HeaderContent>
                        <HeaderContent>
                            <MudTh Style="border: 1px solid #000; padding: 8px;"></MudTh>
                            <MudTh Style="border: 1px solid #000; padding: 8px;"></MudTh>
                            <MudTh Style="border: 1px solid #000; text-align: center; font-size: 0.85rem; padding: 8px; background-color: #e3f2fd;">Per Pig (Bags)</MudTh>
                            <MudTh Style="border: 1px solid #000; text-align: center; font-size: 0.85rem; padding: 8px; background-color: #e3f2fd;">Per Pig Pen (Bags)</MudTh>
                            <MudTh Style="border: 1px solid #000; text-align: center; font-size: 0.85rem; padding: 8px; background-color: #e8f5e8;">Invoice No</MudTh>
                            <MudTh Style="border: 1px solid #000; text-align: center; font-size: 0.85rem; padding: 8px; background-color: #e8f5e8;">Per Invoice (Bags)</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            @{
                                var row = context as TableRowData;
                                var baseStyle = "border: 1px solid #000; padding: 8px;";
                                var subTotalStyle = row.IsSubTotal ? " font-weight: bold; background-color: #f9f9f9;" : "";
                                var centerStyle = " text-align: center;";
                            }
                            <MudTd Style="@(baseStyle + subTotalStyle)">
                                @row.ProductCode
                            </MudTd>
                            <MudTd Style="@(baseStyle + subTotalStyle)">
                                @row.ProductName
                            </MudTd>
                            <MudTd Style="@(baseStyle + centerStyle + subTotalStyle)">
                                @row.PerPigBags
                            </MudTd>
                            <MudTd Style="@(baseStyle + centerStyle + subTotalStyle)">
                                @row.PerPigPenBags
                            </MudTd>
                            <MudTd Style="@(baseStyle + centerStyle + subTotalStyle)">
                                @row.InvoiceNo
                            </MudTd>
                            <MudTd Style="@(baseStyle + centerStyle + subTotalStyle)">
                                @row.PerInvoiceBags
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
                else
                {
                    <MudAlert Severity="Severity.Warning">
                        <MudText>No feed formula found for this pig pen. Please set up feed formulas to enable comparison.</MudText>
                    </MudAlert>
                }
            </MudCardContent>
        </MudCard>

        <!-- Section 4: Harvest List -->
        <MudCard Elevation="2" Class="mb-6">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">
                        <MudIcon Icon="Icons.Material.Filled.Agriculture" Class="mr-2" />
                        Harvest Records (@harvests.Count)
                    </MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary"
                               StartIcon="Icons.Material.Filled.Add"
                               OnClick="AddHarvest">
                        Add Harvest
                    </MudButton>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                @if (harvests.Any())
                {
                    <MudTable Items="@harvests" Hover="true" Striped="true" Dense="true">
                        <HeaderContent>
                            <MudTh>Date</MudTh>
                            <MudTh Style="text-align: center">Pigs Sold</MudTh>
                            <MudTh Style="text-align: right">Avg Weight (kg)</MudTh>
                            <MudTh Style="text-align: right">Weight Range (kg)</MudTh>
                            <MudTh Style="text-align: right">Price per Kg</MudTh>
                            <MudTh Style="text-align: right">Total Revenue</MudTh>
                            <MudTh Style="text-align: center">Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Date">@context.HarvestDate.ToString("dd/MM/yyyy")</MudTd>
                            <MudTd DataLabel="Pigs Sold" Style="text-align: center">
                                <MudChip Size="Size.Small" Color="Color.Info">@context.PigCount</MudChip>
                            </MudTd>
                            <MudTd DataLabel="Avg Weight" Style="text-align: right">@context.AvgWeight.ToString("N1")</MudTd>
                            <MudTd DataLabel="Weight Range" Style="text-align: right">
                                @context.MinWeight.ToString("N1") - @context.MaxWeight.ToString("N1")
                            </MudTd>
                            <MudTd DataLabel="Price per Kg" Style="text-align: right">฿@context.SalePricePerKg.ToString("N2")</MudTd>
                            <MudTd DataLabel="Total Revenue" Style="text-align: right">
                                <MudText Color="Color.Success"><strong>฿@context.Revenue.ToString("N2")</strong></MudText>
                            </MudTd>
                            <MudTd DataLabel="Actions" Style="text-align: center">
                                <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                                    <MudIconButton Icon="Icons.Material.Filled.Edit" 
                                                   Color="Color.Primary" 
                                                   Size="Size.Small"
                                                   OnClick="@(() => EditHarvest(context))" />
                                    <MudIconButton Icon="Icons.Material.Filled.Delete" 
                                                   Color="Color.Error" 
                                                   Size="Size.Small"
                                                   OnClick="@(() => DeleteHarvest(context))" />
                                </MudButtonGroup>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                    
                    <!-- Harvest Summary -->
                    <MudDivider Class="my-4" />
                    <MudText Typo="Typo.h6" Class="mb-2">Harvest Summary</MudText>
                    <MudGrid>
                        <MudItem xs="12" sm="3">
                            <MudPaper Class="pa-3" Elevation="1">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Total Pigs Sold</MudText>
                                <MudText Typo="Typo.h6">@harvests.Sum(h => h.PigCount)</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="3">
                            <MudPaper Class="pa-3" Elevation="1">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Total Weight</MudText>
                                <MudText Typo="Typo.h6">@harvests.Sum(h => h.TotalWeight).ToString("N1") kg</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="3">
                            <MudPaper Class="pa-3" Elevation="1">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Avg Price per Kg</MudText>
                                <MudText Typo="Typo.h6">฿@harvests.Average(h => h.SalePricePerKg).ToString("N2")</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="3">
                            <MudPaper Class="pa-3" Elevation="1">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Total Revenue</MudText>
                                <MudText Typo="Typo.h6" Color="Color.Success">฿@harvests.Sum(h => h.Revenue).ToString("N2")</MudText>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                }
                else
                {
                    <MudAlert Severity="Severity.Info">
                        <MudText>No harvest records found for this pig pen.</MudText>
                    </MudAlert>
                }
            </MudCardContent>
        </MudCard>
    }
</MudContainer>

@code {
    [Parameter] public Guid PigPenId { get; set; }

    private bool loading = true;
    private PigPen? pigPen;
    private PigPenSummary? summary;
    private List<FeedItem> feeds = new();
    private List<GroupedFeedItem> groupedFeeds = new();
    private List<Deposit> deposits = new();
    private List<HarvestResult> harvests = new();
    
    // Feed formula comparison data
    private IEnumerable<FeedFormulaWithCalculationResponse>? feedFormulaCalculations;
    private List<FeedComparisonData> comparisonData = new();

    private List<BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        SetupBreadcrumbs();
    }

    private async Task LoadData()
    {
        loading = true;
        try
        {
            // Load pig pen details
            var pigPens = await Http.GetFromJsonAsync<List<PigPen>>("/api/pigpens") ?? new();
            pigPen = pigPens.FirstOrDefault(p => p.Id == PigPenId);

            if (pigPen != null)
            {
                // Load summary
                summary = await Http.GetFromJsonAsync<PigPenSummary>($"/api/pigpens/{PigPenId}/summary");

                // Load feeds and group by product code
                var allFeeds = await Http.GetFromJsonAsync<List<FeedItem>>($"/api/pigpens/{PigPenId}/feeds") ?? new();
                feeds = allFeeds.OrderByDescending(f => f.Date).ThenBy(f => f.ProductCode).ToList();
                
                // Group feeds by product code
                groupedFeeds = feeds
                    .Where(f => !string.IsNullOrEmpty(f.ProductCode))
                    .GroupBy(f => f.ProductCode)
                    .Select(g => new GroupedFeedItem
                    {
                        ProductCode = g.Key,
                        ProductName = g.First().ProductName ?? g.Key,
                        TotalQuantity = g.Sum(f => f.QuantityKg),
                        FeedCount = g.Count()
                    })
                    .OrderBy(g => g.ProductCode)
                    .ToList();

                // Load deposits
                deposits = await Http.GetFromJsonAsync<List<Deposit>>($"/api/pigpens/{PigPenId}/deposits") ?? new();

                // Load harvests
                harvests = await Http.GetFromJsonAsync<List<HarvestResult>>($"/api/pigpens/{PigPenId}/harvests") ?? new();

                // Load feed formula calculations if there's a selected brand
                if (!string.IsNullOrEmpty(pigPen.SelectedBrand))
                {
                    try
                    {
                        Console.WriteLine($"Loading feed formulas for brand: {pigPen.SelectedBrand}, pig count: {pigPen.PigQty}");
                        feedFormulaCalculations = await FeedFormulaCalculationService.GetFeedFormulasByBrandAsync(pigPen.SelectedBrand, pigPen.PigQty);
                        Console.WriteLine($"Loaded {feedFormulaCalculations?.Count() ?? 0} feed formulas");
                        
                        // Build comparison data
                        BuildComparisonData();
                        Console.WriteLine($"Built comparison data: {comparisonData?.Count ?? 0} items");
                    }
                    catch (Exception feedEx)
                    {
                        Console.WriteLine($"Error loading feed formulas: {feedEx.Message}");
                        Snackbar.Add($"Error loading feed formulas: {feedEx.Message}", Severity.Warning);
                    }
                }
                else
                {
                    Console.WriteLine("No brand selected for pig pen");
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private void SetupBreadcrumbs()
    {
        breadcrumbItems = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/"),
            new BreadcrumbItem("Pig Pens", href: "/pigpens"),
            new BreadcrumbItem(pigPen?.PenCode ?? "Detail", href: null, disabled: true)
        };
    }

    private void EditPigPen()
    {
        Snackbar.Add("Edit pig pen functionality coming soon", Severity.Info);
    }

    private void AddDeposit()
    {
        Snackbar.Add("Add deposit dialog coming soon", Severity.Info);
    }

    private void EditDeposit(Deposit deposit)
    {
        Snackbar.Add($"Edit deposit {deposit.Id} coming soon", Severity.Info);
    }

    private void DeleteDeposit(Deposit deposit)
    {
        Snackbar.Add($"Delete deposit {deposit.Id} coming soon", Severity.Info);
    }

    private void ImportFeeds()
    {
        Snackbar.Add("Import feeds functionality coming soon", Severity.Info);
    }

    private void AddHarvest()
    {
        Snackbar.Add("Add harvest dialog coming soon", Severity.Info);
    }

    private void EditHarvest(HarvestResult harvest)
    {
        Snackbar.Add($"Edit harvest {harvest.Id} coming soon", Severity.Info);
    }

    private void DeleteHarvest(HarvestResult harvest)
    {
        Snackbar.Add($"Delete harvest {harvest.Id} coming soon", Severity.Info);
    }

    private void BuildComparisonData()
    {
        Console.WriteLine($"BuildComparisonData called - feedFormulaCalculations null: {feedFormulaCalculations == null}, pigPen null: {pigPen == null}");
        
        if (feedFormulaCalculations == null || pigPen == null) 
        {
            Console.WriteLine("Exiting BuildComparisonData - missing data");
            return;
        }

        Console.WriteLine($"Processing {feedFormulaCalculations.Count()} feed formulas");

        comparisonData = feedFormulaCalculations.Select(formula =>
        {
            Console.WriteLine($"Processing formula: {formula.ProductCode} - {formula.ProductName}");
            
            // Find matching feed history entries by product code
            var matchingFeeds = feeds.Where(f => f.ProductCode == formula.ProductCode).ToList();
            Console.WriteLine($"Found {matchingFeeds.Count} matching feeds for {formula.ProductCode}");
            
            // Group by invoice number for detailed breakdown
            var feedHistoryEntries = matchingFeeds
                .Where(f => !string.IsNullOrEmpty(f.InvoiceNumber))
                .GroupBy(f => f.InvoiceNumber)
                .Select(g => new FeedHistoryEntry
                {
                    InvoiceNumber = g.Key ?? "Unknown",
                    Quantity = g.Sum(f => f.QuantityKg)
                })
                .ToList();

            var result = new FeedComparisonData
            {
                ProductCode = formula.ProductCode,
                ProductName = formula.ProductName,
                FormulaPerPig = formula.BagPerPig,
                FormulaTotal = formula.TotalBagsRequired,
                ActualTotal = matchingFeeds.Sum(f => f.QuantityKg),
                FeedHistoryEntries = feedHistoryEntries
            };
            
            Console.WriteLine($"Created comparison data: {result.ProductCode}, FormulaPerPig: {result.FormulaPerPig}, FormulaTotal: {result.FormulaTotal}");
            return result;
        }).ToList();
        
        Console.WriteLine($"BuildComparisonData completed - created {comparisonData.Count} comparison items");
    }

    private decimal GetOverallVariance()
    {
        if (!comparisonData.Any()) return 0;
        return comparisonData.Sum(c => c.ActualTotal) - comparisonData.Sum(c => c.FormulaTotal);
    }

    private Severity GetOverallVarianceAlertSeverity()
    {
        var variance = GetOverallVariance();
        var percentage = comparisonData.Sum(c => c.FormulaTotal) > 0 
            ? Math.Abs(variance) / comparisonData.Sum(c => c.FormulaTotal) * 100 
            : 0;
        
        return percentage > 10 ? Severity.Error : percentage > 5 ? Severity.Warning : Severity.Success;
    }

    private decimal GetEfficiencyPercentage()
    {
        if (!comparisonData.Any() || comparisonData.Sum(c => c.FormulaTotal) == 0) return 100;
        
        var actualTotal = comparisonData.Sum(c => c.ActualTotal);
        var formulaTotal = comparisonData.Sum(c => c.FormulaTotal);
        
        // Efficiency: lower actual usage = higher efficiency
        return formulaTotal > 0 ? Math.Max(0, (2 * formulaTotal - actualTotal) / formulaTotal * 100) : 100;
    }

    private Severity GetEfficiencyAlertSeverity()
    {
        var efficiency = GetEfficiencyPercentage();
        return efficiency >= 95 ? Severity.Success : efficiency >= 85 ? Severity.Warning : Severity.Error;
    }

    public class GroupedFeedItem
    {
        public string ProductCode { get; set; } = "";
        public string ProductName { get; set; } = "";
        public decimal TotalQuantity { get; set; }
        public int FeedCount { get; set; }
    }

    // Method to create table rows that match the provided image structure
    private List<TableRowData> GetTableRows()
    {
        var rows = new List<TableRowData>();

        if (comparisonData?.Any() != true)
            return rows;

        foreach (var comparison in comparisonData)
        {
            // First add the main product row with first invoice or empty values
            var firstInvoice = comparison.FeedHistoryEntries.FirstOrDefault();
            rows.Add(new TableRowData
            {
                ProductCode = comparison.ProductCode,
                ProductName = comparison.ProductName,
                PerPigBags = comparison.FormulaPerPig.ToString("F1"),
                PerPigPenBags = comparison.FormulaTotal.ToString("0"),
                InvoiceNo = firstInvoice?.InvoiceNumber ?? "",
                PerInvoiceBags = firstInvoice?.Quantity.ToString("0") ?? "",
                IsSubTotal = false
            });

            // Add additional invoices for this product (from second invoice onwards)
            foreach (var invoice in comparison.FeedHistoryEntries.Skip(1))
            {
                rows.Add(new TableRowData
                {
                    ProductCode = "",
                    ProductName = "",
                    PerPigBags = "",
                    PerPigPenBags = "",
                    InvoiceNo = invoice.InvoiceNumber,
                    PerInvoiceBags = invoice.Quantity.ToString("0"),
                    IsSubTotal = false
                });
            }

            // Add Sub Total row for this product
            rows.Add(new TableRowData
            {
                ProductCode = "",
                ProductName = "",
                PerPigBags = "",
                PerPigPenBags = "",
                InvoiceNo = "Sub Total",
                PerInvoiceBags = comparison.ActualTotal.ToString("0"),
                IsSubTotal = true
            });
        }

        return rows;
    }

    public class TableRowData
    {
        public string ProductCode { get; set; } = "";
        public string ProductName { get; set; } = "";
        public string PerPigBags { get; set; } = "";
        public string PerPigPenBags { get; set; } = "";
        public string InvoiceNo { get; set; } = "";
        public string PerInvoiceBags { get; set; } = "";
        public bool IsSubTotal { get; set; }
    }

    public class FeedComparisonData
    {
        public string ProductCode { get; set; } = "";
        public string ProductName { get; set; } = "";
        public decimal FormulaPerPig { get; set; }
        public decimal FormulaTotal { get; set; }
        public decimal ActualTotal { get; set; }
        public List<FeedHistoryEntry> FeedHistoryEntries { get; set; } = new();
    }

    public class FeedHistoryEntry
    {
        public string InvoiceNumber { get; set; } = "";
        public decimal Quantity { get; set; }
    }
}
