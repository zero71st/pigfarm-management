@page "/pigpens/{pigPenId:guid}/detail"
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject IPigPenService PigPenService
@using PigFarmManagement.Client.Features.FeedFormulas.Services
@inject IFeedFormulaCalculationService FeedFormulaCalculationService

<PageTitle>Pig Pen Detail</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-6">
    @if (loading)
    {
        <div class="d-flex justify-center align-center" style="min-height: 400px;">
            <MudProgressCircular Indeterminate="true" Size="Size.Large" />
            <MudText Class="ml-4" Typo="Typo.h6">Loading pig pen details...</MudText>
        </div>
    }
    else if (pigPen == null)
    {
        <MudAlert Severity="Severity.Error">
            <MudText Typo="Typo.h6">Pig pen not found</MudText>
            <MudText>The requested pig pen could not be found.</MudText>
        </MudAlert>
    }
    else
    {
        <!-- Header Section -->
        <div class="d-flex justify-space-between align-center mb-6">
            <div>
                <MudText Typo="Typo.h3" GutterBottom="true">
                    <MudIcon Icon="Icons.Material.Filled.Widgets" Class="mr-3" />
                    @pigPen.Name
                </MudText>
                <MudBreadcrumbs Items="@breadcrumbItems" />
            </div>
            <div>
                <MudButton Variant="Variant.Outlined" 
                           StartIcon="Icons.Material.Filled.ArrowBack"
                           OnClick="@(() => Navigation.NavigateTo("/pigpens"))"
                           Class="mr-2">
                    Back to List
                </MudButton>
                <MudButton Variant="Variant.Filled" 
                           Color="Color.Primary"
                           StartIcon="Icons.Material.Filled.Edit"
                           OnClick="EditPigPen">
                    Edit
                </MudButton>
            </div>
        </div>

        <!-- Section 1: Pig Pen Details -->
        <MudCard Elevation="2" Class="mb-6">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">
                        <MudIcon Icon="Icons.Material.Filled.Info" Class="mr-2" />
                        Pig Pen Information
                    </MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudSimpleTable Style="overflow-x: auto;" Dense="true">
                            <tbody>
                                <tr>
                                    <td><strong>Pen Code:</strong></td>
                                    <td>@pigPen.PenCode</td>
                                </tr>
                                <tr>
                                    <td><strong>Type:</strong></td>
                                    <td>
                                        <MudChip Color="@(pigPen.Type == PigPenType.Cash ? Color.Success : Color.Info)" 
                                                 Size="Size.Small" Variant="Variant.Filled">
                                            @pigPen.Type
                                        </MudChip>
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>Quantity:</strong></td>
                                    <td>@pigPen.PigQty pigs</td>
                                </tr>
                                <tr>
                                    <td><strong>Register Date:</strong></td>
                                    <td>@pigPen.RegisterDate.ToString("dd/MM/yyyy")</td>
                                </tr>
                                <tr>
                                    <td><strong>Actual Harvest Date:</strong></td>
                                    <td>@(pigPen.ActHarvestDate?.ToString("dd/MM/yyyy") ?? "Ongoing")</td>
                                </tr>
                                <tr>
                                    <td><strong>Est. Harvest:</strong></td>
                                    <td>@(pigPen.EstimatedHarvestDate?.ToString("dd/MM/yyyy") ?? "Not set")</td>
                                </tr>
                            </tbody>
                        </MudSimpleTable>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        @if (summary != null)
                        {
                            <MudSimpleTable Style="overflow-x: auto;" Dense="true">
                                <tbody>
                                    <tr>
                                        <td><strong>Feed Cost:</strong></td>
                                        <td class="text-right">
                                            <MudText Color="Color.Primary">฿@summary.TotalFeedCost.ToString("N0")</MudText>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td><strong>Total Deposits:</strong></td>
                                        <td class="text-right">
                                            @if (depositCalculationInfo != null)
                                            {
                                                <div>
                                                    <MudText Color="@GetDepositStatusColor()">
                                                        <strong>@depositCalculationInfo.CurrentTotalDepositsFormatted</strong>
                                                    </MudText>
                                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                        of @depositCalculationInfo.ExpectedTotalDepositFormatted expected
                                                    </MudText>
                                                    <br />
                                                    <MudChip Size="Size.Small" Color="@GetStatusChipColor()" Variant="Variant.Filled">
                                                        @depositCalculationInfo.CompletionPercentageFormatted
                                                    </MudChip>
                                                </div>
                                            }
                                            else
                                            {
                                                <MudText Color="Color.Secondary">฿@summary.TotalDeposit.ToString("N0")</MudText>
                                            }
                                        </td>
                                    </tr>
                                    <tr>
                                        <td><strong>Investment:</strong></td>
                                        <td class="text-right">
                                            <MudText Color="Color.Info">฿@summary.Investment.ToString("N0")</MudText>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td><strong>Profit/Loss:</strong></td>
                                        <td class="text-right">
                                            <MudText Color="@(summary.ProfitLoss >= 0 ? Color.Success : Color.Error)">
                                                ฿@summary.ProfitLoss.ToString("N0")
                                            </MudText>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td><strong>Net Balance:</strong></td>
                                        <td class="text-right">
                                            <MudText Color="@(summary.NetBalance >= 0 ? Color.Success : Color.Warning)">
                                                ฿@summary.NetBalance.ToString("N0")
                                            </MudText>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td><strong>ROI:</strong></td>
                                        <td class="text-right">
                                            <MudText Color="@(summary.ROI >= 0 ? Color.Success : Color.Error)">
                                                @summary.ROI.ToString("N1")%
                                            </MudText>
                                        </td>
                                    </tr>
                                </tbody>
                            </MudSimpleTable>
                        }
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>

        <!-- Section 2: Deposits List -->
        <MudCard Elevation="2" Class="mb-6">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">
                        <MudIcon Icon="Icons.Material.Filled.AccountBalance" Class="mr-2" />
                        Deposits (@deposits.Count)
                    </MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary"
                               StartIcon="Icons.Material.Filled.Add"
                               OnClick="AddDeposit">
                        Add Deposit
                    </MudButton>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <!-- Deposit Progress Card -->
                @if (pigPen != null && depositCalculationInfo != null)
                {
                    <MudCard Class="mb-4" Style="background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);">
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12" sm="8">
                                    <MudText Typo="Typo.subtitle1" Class="mb-2">
                                        💰 Deposit Progress
                                    </MudText>
                                    <MudProgressLinear Value="@((double)(depositCalculationInfo.CompletionPercentage * 100))" 
                                                     Color="@GetProgressColor()" 
                                                     Size="Size.Large" 
                                                     Class="mb-2" />
                                    <MudText Typo="Typo.body2" Class="mb-1">
                                        <strong>@depositCalculationInfo.CurrentTotalDepositsFormatted</strong> of <strong>@depositCalculationInfo.ExpectedTotalDepositFormatted</strong> collected
                                    </MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        Based on @depositCalculationInfo.PigQuantity pigs × @depositCalculationInfo.DepositPerPigFormatted per pig
                                    </MudText>
                                </MudItem>
                                <MudItem xs="12" sm="4" Class="d-flex flex-column justify-center">
                                    <MudChip Color="@GetStatusChipColor()" Size="Size.Large" Class="ma-1">
                                        @GetStatusText()
                                    </MudChip>
                                    @if (depositCalculationInfo.RemainingDeposit > 0)
                                    {
                                        <MudText Typo="Typo.body2" Class="text-center mt-2">
                                            <strong>@depositCalculationInfo.RemainingDepositFormatted</strong> remaining
                                        </MudText>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body2" Class="text-center mt-2" Style="color: #4caf50;">
                                            ✅ Complete!
                                        </MudText>
                                    }
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                }
                
                @if (deposits.Any())
                {
                    <MudTable Items="@deposits" Hover="true" Striped="true" Dense="true">
                        <HeaderContent>
                            <MudTh>Date</MudTh>
                            <MudTh Style="text-align: right">Amount</MudTh>
                            <MudTh>Notes</MudTh>
                            <MudTh Style="text-align: center">Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Date">@context.Date.ToString("dd/MM/yyyy")</MudTd>
                            <MudTd DataLabel="Amount" Style="text-align: right">
                                <MudText Color="Color.Success"><strong>฿@context.Amount.ToString("N2")</strong></MudText>
                            </MudTd>
                            <MudTd DataLabel="Notes">@(context.Remark ?? "-")</MudTd>
                            <MudTd DataLabel="Actions" Style="text-align: center">
                                <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                                    <MudButton Color="Color.Primary" 
                                             Size="Size.Small"
                                             Variant="Variant.Outlined"
                                             Title="Edit Deposit"
                                             OnClick="@(() => EditDeposit(context))">
                                        ✏️ Edit
                                    </MudButton>
                                    <MudButton Color="Color.Error" 
                                             Size="Size.Small"
                                             Variant="Variant.Outlined"
                                             Title="Delete Deposit"
                                             OnClick="@(() => DeleteDeposit(context))">
                                        🗑️ Delete
                                    </MudButton>
                                </MudButtonGroup>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
                else
                {
                    <MudAlert Severity="Severity.Info">
                        <MudText>No deposits recorded for this pig pen.</MudText>
                    </MudAlert>
                }
            </MudCardContent>
        </MudCard>

        <!-- Section 3: Feed History -->
        <MudCard Elevation="2" Class="mb-6">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">
                        <MudIcon Icon="Icons.Material.Filled.Fastfood" Class="mr-2" />
                        Feed History (@feeds.Count)
                    </MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary"
                               StartIcon="Icons.Material.Filled.Download"
                               OnClick="ImportFeeds">
                        Import Feeds
                    </MudButton>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <!-- Always show debug info and comparison section -->
                <!-- Show feed status -->
                @if (feeds.Any())
                {
                    <MudText Class="mb-3" Color="Color.Success">✓ Found @feeds.Count feed records for this pig pen.</MudText>
                }
                else
                {
                    <MudAlert Severity="Severity.Info" Class="mb-3">
                        <MudText>No feed records found for this pig pen. The comparison will show formula data only.</MudText>
                    </MudAlert>
                }

                <!-- Feed Progress Card -->
                @if (feedProgressSummary != null)
                {
                    <MudCard Class="mb-4" Style="background: linear-gradient(135deg, #e8f5e8 0%, #d4e6d4 100%);">
                        <MudCardContent>
                            <MudGrid>
                                <MudItem xs="12" sm="8">
                                    <MudText Typo="Typo.subtitle1" Class="mb-2">
                                        🍽️ Feed Progress
                                    </MudText>
                                    <MudProgressLinear Value="@((double)feedProgressSummary.Progress.PercentageComplete)" 
                                                     Color="@GetFeedProgressColor()" 
                                                     Size="Size.Large" 
                                                     Class="mb-2" />
                                    <MudText Typo="Typo.body2" Class="mb-1">
                                        <strong>@feedProgressSummary.Progress.ActualBags.ToString("F1")</strong> of <strong>@feedProgressSummary.Progress.RequiredBags.ToString("F1")</strong> bags used
                                    </MudText>
                                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                                        Based on @feedProgressSummary.PigCount pigs × @((feedProgressSummary.Progress.RequiredBags / feedProgressSummary.PigCount).ToString("F1")) bags per pig
                                    </MudText>
                                </MudItem>
                                <MudItem xs="12" sm="4" Class="d-flex flex-column justify-center">
                                    <MudChip Color="@GetFeedStatusChipColor()" Size="Size.Large" Class="ma-1">
                                        @feedProgressSummary.Progress.Status
                                    </MudChip>
                                    @if (feedProgressSummary.Progress.RequiredBags > feedProgressSummary.Progress.ActualBags)
                                    {
                                        <MudText Typo="Typo.body2" Class="text-center mt-2">
                                            <strong>@((feedProgressSummary.Progress.RequiredBags - feedProgressSummary.Progress.ActualBags).ToString("F1"))</strong> bags remaining
                                        </MudText>
                                    }
                                    else if (feedProgressSummary.Progress.ActualBags > feedProgressSummary.Progress.RequiredBags)
                                    {
                                        <MudText Typo="Typo.body2" Class="text-center mt-2" Style="color: #ff5722;">
                                            ⚠️ Over by @((feedProgressSummary.Progress.ActualBags - feedProgressSummary.Progress.RequiredBags).ToString("F1")) bags
                                        </MudText>
                                    }
                                    else
                                    {
                                        <MudText Typo="Typo.body2" Class="text-center mt-2" Style="color: #4caf50;">
                                            ✅ On target!
                                        </MudText>
                                    }
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                }

                <!-- Table matching the provided image structure -->
                @if (feedFormulaCalculations != null && feedFormulaCalculations.Any())
                {
                    <MudPaper Elevation="3" Class="pa-4 ma-2" Style="border-radius: 12px; overflow: hidden;">
                        <MudTable Items="@GetTableRows()" Dense="false" Hover="true" Striped="false" 
                                 FixedHeader="true" Class="comparison-table" 
                                 Style="border-radius: 8px; overflow: hidden; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                            <HeaderContent>
                                <MudTh Style="border: none; text-align: center; font-weight: 600; padding: 16px 12px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; font-size: 0.9rem;">Product Code</MudTh>
                                <MudTh Style="border: none; text-align: center; font-weight: 600; padding: 16px 12px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; font-size: 0.9rem;">Product Name</MudTh>
                                <MudTh Style="border: none; text-align: center; font-weight: 600; padding: 16px 12px; background: linear-gradient(135deg, #2196f3 0%, #21cbf3 100%); color: white; font-size: 0.9rem;" colspan="2">📊 Feed Formula</MudTh>
                                <MudTh Style="border: none; text-align: center; font-weight: 600; padding: 16px 12px; background: linear-gradient(135deg, #4caf50 0%, #8bc34a 100%); color: white; font-size: 0.9rem;" colspan="2">📋 Feed History</MudTh>
                            </HeaderContent>
                            <HeaderContent>
                                <MudTh Style="border: none; padding: 12px; background-color: #f8f9fa;"></MudTh>
                                <MudTh Style="border: none; padding: 12px; background-color: #f8f9fa;"></MudTh>
                                <MudTh Style="border: none; text-align: center; font-size: 0.8rem; padding: 12px; background-color: #e3f2fd; color: #1565c0; font-weight: 500;">Per Pig (Bags)</MudTh>
                                <MudTh Style="border: none; text-align: center; font-size: 0.8rem; padding: 12px; background-color: #e3f2fd; color: #1565c0; font-weight: 500;">Per Pig Pen (Bags)</MudTh>
                                <MudTh Style="border: none; text-align: center; font-size: 0.8rem; padding: 12px; background-color: #e8f5e8; color: #2e7d32; font-weight: 500;">Invoice No</MudTh>
                                <MudTh Style="border: none; text-align: center; font-size: 0.8rem; padding: 12px; background-color: #e8f5e8; color: #2e7d32; font-weight: 500;">Per Invoice (Bags)</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                @{
                                    var row = context as TableRowData;
                                    var baseStyle = "border: none; border-bottom: 1px solid #e0e0e0; padding: 14px 12px; transition: all 0.2s ease;";
                                    var subTotalStyle = row.IsSubTotal ? " font-weight: 600; background: linear-gradient(90deg, #fff3e0 0%, #ffe0b2 100%); border-bottom: 2px solid #ff9800;" : "";
                                    var grandTotalStyle = row.IsGrandTotal ? " font-weight: 700; background: linear-gradient(90deg, #e8eaf6 0%, #c5cae9 100%); color: #3f51b5; border-bottom: 3px solid #3f51b5; font-size: 1.05em;" : "";
                                    var centerStyle = " text-align: center;";
                                    var leftStyle = " text-align: left;";
                                    var regularRowStyle = !row.IsSubTotal && !row.IsGrandTotal ? " background-color: white;" : "";
                                    
                                    var productCodeStyle = baseStyle + leftStyle + subTotalStyle + grandTotalStyle + regularRowStyle;
                                    var productNameStyle = baseStyle + leftStyle + subTotalStyle + grandTotalStyle + regularRowStyle;
                                    var cellStyle = baseStyle + centerStyle + subTotalStyle + grandTotalStyle + regularRowStyle;
                                }
                                <MudTd Style="@productCodeStyle">
                                    <span style="font-family: 'Roboto Mono', monospace;">@row.ProductCode</span>
                                </MudTd>
                                <MudTd Style="@productNameStyle">
                                    <span style="font-weight: 500;">@row.ProductName</span>
                                </MudTd>
                                <MudTd Style="@cellStyle">
                                    <MudChip Size="Size.Small" Color="Color.Primary" Variant="Variant.Text" Style="@(row.IsGrandTotal ? "font-weight: 700;" : "")">
                                        @row.PerPigBags
                                    </MudChip>
                                </MudTd>
                                <MudTd Style="@cellStyle">
                                    <MudChip Size="Size.Small" Color="Color.Primary" Variant="Variant.Text" Style="@(row.IsGrandTotal ? "font-weight: 700;" : "")">
                                        @row.PerPigPenBags
                                    </MudChip>
                                </MudTd>
                                <MudTd Style="@cellStyle">
                                    @if (row.IsSubTotal)
                                    {
                                        <MudChip Size="Size.Small" Color="Color.Warning" Variant="Variant.Filled" Style="font-weight: 600;">
                                            @row.InvoiceNo
                                        </MudChip>
                                    }
                                    else if (row.IsGrandTotal)
                                    {
                                        <MudChip Size="Size.Medium" Color="Color.Primary" Variant="Variant.Filled" Style="font-weight: 700; font-size: 0.9rem;">
                                            🎯 @row.InvoiceNo
                                        </MudChip>
                                    }
                                    else
                                    {
                                        <span style="font-family: 'Roboto Mono', monospace; padding: 4px 8px; background-color: #f5f5f5; border-radius: 4px; font-size: 0.85rem;">
                                            @row.InvoiceNo
                                        </span>
                                    }
                                </MudTd>
                                <MudTd Style="@cellStyle">
                                    <MudChip Size="Size.Small" Color="Color.Success" Variant="Variant.Text" Style="@(row.IsGrandTotal ? "font-weight: 700;" : "")">
                                        @row.PerInvoiceBags
                                    </MudChip>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudPaper>
                }
                else
                {
                    <MudAlert Severity="Severity.Warning">
                        <MudText>No feed formula found for this pig pen. Please set up feed formulas to enable comparison.</MudText>
                    </MudAlert>
                }
            </MudCardContent>
        </MudCard>

        <!-- Section 4: Harvest List -->
        <MudCard Elevation="2" Class="mb-6">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">
                        <MudIcon Icon="Icons.Material.Filled.Agriculture" Class="mr-2" />
                        Harvest Records (@harvests.Count)
                    </MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary"
                               StartIcon="Icons.Material.Filled.Add"
                               OnClick="AddHarvest">
                        Add Harvest
                    </MudButton>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                @if (harvests.Any())
                {
                    <MudTable Items="@harvests" Hover="true" Striped="true" Dense="true">
                        <HeaderContent>
                            <MudTh>Date</MudTh>
                            <MudTh Style="text-align: center">Pigs Sold</MudTh>
                            <MudTh Style="text-align: right">Avg Weight (kg)</MudTh>
                            <MudTh Style="text-align: right">Weight Range (kg)</MudTh>
                            <MudTh Style="text-align: right">Price per Kg</MudTh>
                            <MudTh Style="text-align: right">Total Revenue</MudTh>
                            <MudTh Style="text-align: center">Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Date">@context.HarvestDate.ToString("dd/MM/yyyy")</MudTd>
                            <MudTd DataLabel="Pigs Sold" Style="text-align: center">
                                <MudChip Size="Size.Small" Color="Color.Info">@context.PigCount</MudChip>
                            </MudTd>
                            <MudTd DataLabel="Avg Weight" Style="text-align: right">@context.AvgWeight.ToString("N1")</MudTd>
                            <MudTd DataLabel="Weight Range" Style="text-align: right">
                                @context.MinWeight.ToString("N1") - @context.MaxWeight.ToString("N1")
                            </MudTd>
                            <MudTd DataLabel="Price per Kg" Style="text-align: right">฿@context.SalePricePerKg.ToString("N2")</MudTd>
                            <MudTd DataLabel="Total Revenue" Style="text-align: right">
                                <MudText Color="Color.Success"><strong>฿@context.Revenue.ToString("N2")</strong></MudText>
                            </MudTd>
                            <MudTd DataLabel="Actions" Style="text-align: center">
                                <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                                    <MudIconButton Icon="Icons.Material.Filled.Edit" 
                                                   Color="Color.Primary" 
                                                   Size="Size.Small"
                                                   OnClick="@(() => EditHarvest(context))" />
                                    <MudIconButton Icon="Icons.Material.Filled.Delete" 
                                                   Color="Color.Error" 
                                                   Size="Size.Small"
                                                   OnClick="@(() => DeleteHarvest(context))" />
                                </MudButtonGroup>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                    
                    <!-- Harvest Summary -->
                    <MudDivider Class="my-4" />
                    <MudText Typo="Typo.h6" Class="mb-2">Harvest Summary</MudText>
                    <MudGrid>
                        <MudItem xs="12" sm="3">
                            <MudPaper Class="pa-3" Elevation="1">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Total Pigs Sold</MudText>
                                <MudText Typo="Typo.h6">@harvests.Sum(h => h.PigCount)</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="3">
                            <MudPaper Class="pa-3" Elevation="1">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Total Weight</MudText>
                                <MudText Typo="Typo.h6">@harvests.Sum(h => h.TotalWeight).ToString("N1") kg</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="3">
                            <MudPaper Class="pa-3" Elevation="1">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Avg Price per Kg</MudText>
                                <MudText Typo="Typo.h6">฿@harvests.Average(h => h.SalePricePerKg).ToString("N2")</MudText>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="12" sm="3">
                            <MudPaper Class="pa-3" Elevation="1">
                                <MudText Typo="Typo.body2" Color="Color.Secondary">Total Revenue</MudText>
                                <MudText Typo="Typo.h6" Color="Color.Success">฿@harvests.Sum(h => h.Revenue).ToString("N2")</MudText>
                            </MudPaper>
                        </MudItem>
                    </MudGrid>
                }
                else
                {
                    <MudAlert Severity="Severity.Info">
                        <MudText>No harvest records found for this pig pen.</MudText>
                    </MudAlert>
                }
            </MudCardContent>
        </MudCard>
    }
</MudContainer>

@code {
    [Parameter] public Guid PigPenId { get; set; }

    private bool loading = true;
    private PigPen? pigPen;
    private PigPenSummary? summary;
    private List<FeedItem> feeds = new();
    private List<GroupedFeedItem> groupedFeeds = new();
    private List<Deposit> deposits = new();
    private List<HarvestResult> harvests = new();
    
    // Deposit calculation information
    private DepositCalculationInfo? depositCalculationInfo;
    
    // Feed formula comparison data
    private IEnumerable<FeedFormulaWithCalculationResponse>? feedFormulaCalculations;
    private List<FeedComparisonData> comparisonData = new();
    
    // Feed progress data
    private FeedProgressSummary? feedProgressSummary;

    private List<BreadcrumbItem> breadcrumbItems = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        SetupBreadcrumbs();
    }

    private async Task LoadData()
    {
        loading = true;
        try
        {
            // Load pig pen details
            var pigPens = await Http.GetFromJsonAsync<List<PigPen>>("/api/pigpens") ?? new();
            pigPen = pigPens.FirstOrDefault(p => p.Id == PigPenId);

            if (pigPen != null)
            {
                // Load summary
                summary = await Http.GetFromJsonAsync<PigPenSummary>($"/api/pigpens/{PigPenId}/summary");

                // Load feeds and group by product code
                var allFeeds = await Http.GetFromJsonAsync<List<FeedItem>>($"/api/pigpens/{PigPenId}/feeds") ?? new();
                feeds = allFeeds.OrderByDescending(f => f.Date).ThenBy(f => f.ProductCode).ToList();
                
                // Group feeds by product code
                groupedFeeds = feeds
                    .Where(f => !string.IsNullOrEmpty(f.ProductCode))
                    .GroupBy(f => f.ProductCode)
                    .Select(g => new GroupedFeedItem
                    {
                        ProductCode = g.Key,
                        ProductName = g.First().ProductName ?? g.Key,
                        TotalQuantity = g.Sum(f => f.QuantityKg),
                        FeedCount = g.Count()
                    })
                    .OrderBy(g => g.ProductCode)
                    .ToList();

                // Load deposits
                deposits = await Http.GetFromJsonAsync<List<Deposit>>($"/api/pigpens/{PigPenId}/deposits") ?? new();

                // Calculate deposit information
                if (pigPen != null)
                {
                    depositCalculationInfo = DepositCalculationInfo.Create(pigPen, deposits);
                }

                // Load harvests
                harvests = await Http.GetFromJsonAsync<List<HarvestResult>>($"/api/pigpens/{PigPenId}/harvests") ?? new();

                // Load feed progress summary
                try
                {
                    feedProgressSummary = await Http.GetFromJsonAsync<FeedProgressSummary>($"/api/pigpens/{PigPenId}/feed-progress/summary");
                    Console.WriteLine($"Loaded feed progress: {feedProgressSummary?.Progress?.Status ?? "No data"}");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error loading feed progress: {ex.Message}");
                    Snackbar.Add($"Error loading feed progress: {ex.Message}", Severity.Warning);
                }

                // Load feed formula calculations if there's a selected brand
                if (pigPen != null && !string.IsNullOrEmpty(pigPen.SelectedBrand))
                {
                    try
                    {
                        Console.WriteLine($"Loading feed formulas for brand: {pigPen.SelectedBrand}, pig count: {pigPen.PigQty}");
                        feedFormulaCalculations = await FeedFormulaCalculationService.GetFeedFormulasByBrandAsync(pigPen.SelectedBrand, pigPen.PigQty);
                        Console.WriteLine($"Loaded {feedFormulaCalculations?.Count() ?? 0} feed formulas");
                        
                        // Build comparison data
                        BuildComparisonData();
                        Console.WriteLine($"Built comparison data: {comparisonData?.Count ?? 0} items");
                    }
                    catch (Exception feedEx)
                    {
                        Console.WriteLine($"Error loading feed formulas: {feedEx.Message}");
                        Snackbar.Add($"Error loading feed formulas: {feedEx.Message}", Severity.Warning);
                    }
                }
                else
                {
                    Console.WriteLine("No brand selected for pig pen");
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private void SetupBreadcrumbs()
    {
        breadcrumbItems = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Home", href: "/"),
            new BreadcrumbItem("Pig Pens", href: "/pigpens"),
            new BreadcrumbItem(pigPen?.PenCode ?? "Detail", href: null, disabled: true)
        };
    }

    private async Task LoadDeposits()
    {
        if (pigPen == null) return;
        
        try
        {
            deposits = await Http.GetFromJsonAsync<List<Deposit>>($"/api/pigpens/{PigPenId}/deposits") ?? new();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading deposits: {ex.Message}", Severity.Error);
        }
    }

    private void EditPigPen()
    {
        Snackbar.Add("Edit pig pen functionality coming soon", Severity.Info);
    }

    private async Task AddDeposit()
    {
        if (pigPen == null) return;

        var parameters = new DialogParameters<AddDepositDialog>
        {
            { x => x.PigPenId, pigPen.Id },
            { x => x.PigPen, pigPen },
            { x => x.CurrentDeposits, deposits ?? new List<Deposit>() }
        };

        var options = new DialogOptions() 
        { 
            CloseButton = true, 
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = await DialogService.ShowAsync<AddDepositDialog>("Add Deposit", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // Refresh deposits list
            await RefreshDeposits();
            
            // Refresh summary to update total deposits
            if (summary != null)
            {
                summary = await Http.GetFromJsonAsync<PigPenSummary>($"/api/pigpens/{PigPenId}/summary");
                StateHasChanged();
            }
        }
    }

    private async Task EditDeposit(Deposit deposit)
    {
        var parameters = new DialogParameters<EditDepositDialog>
        {
            { x => x.DepositToEdit, deposit },
            { x => x.PigPen, pigPen },
            { x => x.CurrentDeposits, deposits ?? new List<Deposit>() }
        };

        var options = new DialogOptions() 
        { 
            CloseButton = true, 
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = await DialogService.ShowAsync<EditDepositDialog>("Edit Deposit", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // Refresh deposits list
            await RefreshDeposits();
            
            // Refresh summary to update total deposits
            if (summary != null)
            {
                summary = await Http.GetFromJsonAsync<PigPenSummary>($"/api/pigpens/{PigPenId}/summary");
                StateHasChanged();
            }
        }
    }

    private async Task DeleteDeposit(Deposit deposit)
    {
        var parameters = new DialogParameters<DeleteDepositConfirmationDialog>
        {
            { x => x.DepositToDelete, deposit }
        };

        var options = new DialogOptions() 
        { 
            CloseButton = true, 
            MaxWidth = MaxWidth.Small,
            FullWidth = true
        };

        var dialog = await DialogService.ShowAsync<DeleteDepositConfirmationDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is bool confirmed && confirmed)
        {
            try
            {
                var success = await PigPenService.DeleteDepositAsync(deposit.PigPenId, deposit.Id);
                
                if (success)
                {
                    Snackbar.Add($"Deposit of ฿{deposit.Amount:N2} deleted successfully", Severity.Success);
                    
                    // Refresh deposits list
                    await RefreshDeposits();
                    
                    // Refresh summary to update total deposits
                    if (summary != null)
                    {
                        summary = await Http.GetFromJsonAsync<PigPenSummary>($"/api/pigpens/{PigPenId}/summary");
                        StateHasChanged();
                    }
                }
                else
                {
                    Snackbar.Add("Failed to delete deposit", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting deposit: {ex.Message}", Severity.Error);
            }
        }
    }

    private void ImportFeeds()
    {
        Snackbar.Add("Import feeds functionality coming soon", Severity.Info);
    }

    private void AddHarvest()
    {
        Snackbar.Add("Add harvest dialog coming soon", Severity.Info);
    }

    private void EditHarvest(HarvestResult harvest)
    {
        Snackbar.Add($"Edit harvest {harvest.Id} coming soon", Severity.Info);
    }

    private void DeleteHarvest(HarvestResult harvest)
    {
        Snackbar.Add($"Delete harvest {harvest.Id} coming soon", Severity.Info);
    }

    private void BuildComparisonData()
    {
        Console.WriteLine($"BuildComparisonData called - feedFormulaCalculations null: {feedFormulaCalculations == null}, pigPen null: {pigPen == null}");
        
        if (feedFormulaCalculations == null || pigPen == null) 
        {
            Console.WriteLine("Exiting BuildComparisonData - missing data");
            return;
        }

        Console.WriteLine($"Processing {feedFormulaCalculations.Count()} feed formulas");

        comparisonData = feedFormulaCalculations.Select(formula =>
        {
            Console.WriteLine($"Processing formula: {formula.ProductCode} - {formula.ProductName}");
            
            // Find matching feed history entries by product code
            var matchingFeeds = feeds.Where(f => f.ProductCode == formula.ProductCode).ToList();
            Console.WriteLine($"Found {matchingFeeds.Count} matching feeds for {formula.ProductCode}");
            
            // Group by invoice number for detailed breakdown
            var feedHistoryEntries = matchingFeeds
                .GroupBy(f => string.IsNullOrEmpty(f.InvoiceNumber) ? "N/A" : f.InvoiceNumber)
                .Select(g => new FeedHistoryEntry
                {
                    InvoiceNumber = g.Key ?? "N/A",
                    Quantity = g.Sum(f => f.QuantityKg)
                })
                .ToList();

            var result = new FeedComparisonData
            {
                ProductCode = formula.ProductCode,
                ProductName = formula.ProductName,
                FormulaPerPig = formula.BagPerPig,
                FormulaTotal = formula.TotalBagsRequired,
                ActualTotal = matchingFeeds.Sum(f => f.QuantityKg),
                FeedHistoryEntries = feedHistoryEntries
            };
            
            Console.WriteLine($"Created comparison data: {result.ProductCode}, FormulaPerPig: {result.FormulaPerPig}, FormulaTotal: {result.FormulaTotal}");
            return result;
        }).ToList();
        
        Console.WriteLine($"BuildComparisonData completed - created {comparisonData.Count} comparison items");
    }

    private decimal GetOverallVariance()
    {
        if (!comparisonData.Any()) return 0;
        return comparisonData.Sum(c => c.ActualTotal) - comparisonData.Sum(c => c.FormulaTotal);
    }

    private Severity GetOverallVarianceAlertSeverity()
    {
        var variance = GetOverallVariance();
        var percentage = comparisonData.Sum(c => c.FormulaTotal) > 0 
            ? Math.Abs(variance) / comparisonData.Sum(c => c.FormulaTotal) * 100 
            : 0;
        
        return percentage > 10 ? Severity.Error : percentage > 5 ? Severity.Warning : Severity.Success;
    }

    private decimal GetEfficiencyPercentage()
    {
        if (!comparisonData.Any() || comparisonData.Sum(c => c.FormulaTotal) == 0) return 100;
        
        var actualTotal = comparisonData.Sum(c => c.ActualTotal);
        var formulaTotal = comparisonData.Sum(c => c.FormulaTotal);
        
        // Efficiency: lower actual usage = higher efficiency
        return formulaTotal > 0 ? Math.Max(0, (2 * formulaTotal - actualTotal) / formulaTotal * 100) : 100;
    }

    private Severity GetEfficiencyAlertSeverity()
    {
        var efficiency = GetEfficiencyPercentage();
        return efficiency >= 95 ? Severity.Success : efficiency >= 85 ? Severity.Warning : Severity.Error;
    }

    public class GroupedFeedItem
    {
        public string ProductCode { get; set; } = "";
        public string ProductName { get; set; } = "";
        public decimal TotalQuantity { get; set; }
        public int FeedCount { get; set; }
    }

    // Method to create table rows that match the provided image structure
    private List<TableRowData> GetTableRows()
    {
        var rows = new List<TableRowData>();

        if (comparisonData?.Any() != true)
            return rows;

        foreach (var comparison in comparisonData)
        {
            // Check if there are any feed history entries
            if (comparison.FeedHistoryEntries.Any())
            {
                // First add the main product row with first invoice
                var firstInvoice = comparison.FeedHistoryEntries.First();
                rows.Add(new TableRowData
                {
                    ProductCode = comparison.ProductCode,
                    ProductName = comparison.ProductName,
                    PerPigBags = comparison.FormulaPerPig.ToString("F1"),
                    PerPigPenBags = comparison.FormulaTotal.ToString("0"),
                    InvoiceNo = firstInvoice.InvoiceNumber,
                    PerInvoiceBags = firstInvoice.Quantity.ToString("0"),
                    IsSubTotal = false
                });

                // Add additional invoices for this product (from second invoice onwards)
                foreach (var invoice in comparison.FeedHistoryEntries.Skip(1))
                {
                    rows.Add(new TableRowData
                    {
                        ProductCode = "",
                        ProductName = "",
                        PerPigBags = "",
                        PerPigPenBags = "",
                        InvoiceNo = invoice.InvoiceNumber,
                        PerInvoiceBags = invoice.Quantity.ToString("0"),
                        IsSubTotal = false
                    });
                }

                // Add Sub Total row for this product
                rows.Add(new TableRowData
                {
                    ProductCode = "",
                    ProductName = "",
                    PerPigBags = "",
                    PerPigPenBags = "",
                    InvoiceNo = "Sub Total",
                    PerInvoiceBags = comparison.ActualTotal.ToString("0"),
                    IsSubTotal = true
                });
            }
            else
            {
                // No feed history - show only formula data with "No Feeds" indicator
                rows.Add(new TableRowData
                {
                    ProductCode = comparison.ProductCode,
                    ProductName = comparison.ProductName,
                    PerPigBags = comparison.FormulaPerPig.ToString("F1"),
                    PerPigPenBags = comparison.FormulaTotal.ToString("0"),
                    InvoiceNo = "No Feeds",
                    PerInvoiceBags = "0",
                    IsSubTotal = false
                });
            }
        }

        // Calculate grand totals
        var grandTotalPerPig = comparisonData.Sum(c => c.FormulaPerPig);
        var grandTotalPerPigPen = comparisonData.Sum(c => c.FormulaTotal);
        var grandTotalPerInvoice = comparisonData.Sum(c => c.ActualTotal);

        // Add Grand Total row
        rows.Add(new TableRowData
        {
            ProductCode = "",
            ProductName = "",
            PerPigBags = grandTotalPerPig.ToString("F1"),
            PerPigPenBags = grandTotalPerPigPen.ToString("0"),
            InvoiceNo = "Grand Total",
            PerInvoiceBags = grandTotalPerInvoice.ToString("0"),
            IsSubTotal = false,
            IsGrandTotal = true
        });

        return rows;
    }

    public class TableRowData
    {
        public string ProductCode { get; set; } = "";
        public string ProductName { get; set; } = "";
        public string PerPigBags { get; set; } = "";
        public string PerPigPenBags { get; set; } = "";
        public string InvoiceNo { get; set; } = "";
        public string PerInvoiceBags { get; set; } = "";
        public bool IsSubTotal { get; set; }
        public bool IsGrandTotal { get; set; }
    }

    public class FeedComparisonData
    {
        public string ProductCode { get; set; } = "";
        public string ProductName { get; set; } = "";
        public decimal FormulaPerPig { get; set; }
        public decimal FormulaTotal { get; set; }
        public decimal ActualTotal { get; set; }
        public List<FeedHistoryEntry> FeedHistoryEntries { get; set; } = new();
    }

    public class FeedHistoryEntry
    {
        public string InvoiceNumber { get; set; } = "";
        public decimal Quantity { get; set; }
    }

    // Deposit-related helper methods
    private Color GetProgressColor()
    {
        if (depositCalculationInfo == null) return Color.Default;
        
        return depositCalculationInfo.Status switch
        {
            DepositCompletionStatus.Complete => Color.Success,
            DepositCompletionStatus.Partial => Color.Warning,
            DepositCompletionStatus.Started => Color.Info,
            _ => Color.Error
        };
    }

    private Color GetStatusChipColor()
    {
        if (depositCalculationInfo == null) return Color.Default;
        
        return depositCalculationInfo.Status switch
        {
            DepositCompletionStatus.Complete => Color.Success,
            DepositCompletionStatus.Partial => Color.Warning,
            DepositCompletionStatus.Started => Color.Info,
            _ => Color.Error
        };
    }

    private string GetStatusText()
    {
        if (depositCalculationInfo == null) return "Unknown";
        
        return depositCalculationInfo.Status switch
        {
            DepositCompletionStatus.Complete => "✅ Complete",
            DepositCompletionStatus.Partial => "🟡 Partial",
            DepositCompletionStatus.Started => "🔵 Started",
            _ => "🔴 No Deposits"
        };
    }

    private Color GetDepositStatusColor()
    {
        if (depositCalculationInfo == null) return Color.Secondary;
        
        return depositCalculationInfo.Status switch
        {
            DepositCompletionStatus.Complete => Color.Success,
            DepositCompletionStatus.Partial => Color.Warning,
            DepositCompletionStatus.Started => Color.Info,
            _ => Color.Error
        };
    }

    private async Task RefreshDeposits()
    {
        try
        {
            deposits = await Http.GetFromJsonAsync<List<Deposit>>($"/api/pigpens/{PigPenId}/deposits") ?? new();
            
            // Recalculate deposit information
            if (pigPen != null)
            {
                depositCalculationInfo = DepositCalculationInfo.Create(pigPen, deposits);
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading deposits: {ex.Message}", Severity.Error);
        }
    }

    // Feed progress helper methods
    private string GetFeedProgressIcon()
    {
        if (feedProgressSummary?.Progress == null) return Icons.Material.Filled.HelpOutline;
        
        return feedProgressSummary.Progress.Status switch
        {
            "Complete" => Icons.Material.Filled.CheckCircle,
            "On Track" => Icons.Material.Filled.TrendingUp,
            "Over Feeding" => Icons.Material.Filled.Warning,
            "Behind Schedule" => Icons.Material.Filled.Schedule,
            _ => Icons.Material.Filled.Info
        };
    }

    private Color GetFeedProgressColor()
    {
        if (feedProgressSummary?.Progress == null) return Color.Default;
        
        return feedProgressSummary.Progress.Status switch
        {
            "On track" => Color.Success,
            "Below target" => Color.Warning,
            "Under-fed" => Color.Error,
            "Over-feeding" => Color.Error,
            _ => Color.Info
        };
    }

    private Color GetFeedStatusChipColor()
    {
        if (feedProgressSummary?.Progress == null) return Color.Default;
        
        return feedProgressSummary.Progress.Status switch
        {
            "On track" => Color.Success,
            "Below target" => Color.Warning,
            "Under-fed" => Color.Error,
            "Over-feeding" => Color.Error,
            _ => Color.Info
        };
    }
}
