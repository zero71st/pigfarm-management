@page "/pigpens"
@using System.Linq
@inject ICustomerService CustomerService
@inject IPigPenService PigPenService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<PageTitle>PigTrack Pro - Pig Pens</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Pig Pen Management</MudText>

<!-- Filter and Search Section -->
<MudPaper Class="pa-4 ma-2" Elevation="2">
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudSelect T="Guid?" @bind-Value="SelectedCustomerId" Label="Filter Customer" Variant="Variant.Outlined">
                <MudSelectItem T="Guid?" Value="@((Guid?)null)">All Customers</MudSelectItem>
                @foreach (var customer in customers)
                {
                    <MudSelectItem T="Guid?" Value="@((Guid?)customer.Id)">@customer.Name (@customer.Type)</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudTextField @bind-Value="SearchText" Label="Search" Variant="Variant.Outlined" 
                         Adornment="Adornment.End" AdornmentIcon="Icons.Material.Filled.Search" />
        </MudItem>
    </MudGrid>
</MudPaper>

<!-- Pig Pen Management Section -->
<MudPaper Class="pa-4 ma-2" Elevation="2">
    <div class="d-flex justify-space-between align-center mb-4">
        <MudText Typo="Typo.h6">Pig Pen List</MudText>
        <div class="d-flex gap-2">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" 
                       StartIcon="Icons.Material.Filled.CloudDownload" OnClick="ShowFeedImportDialog">
                Import POSPOS Feeds
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                       StartIcon="Icons.Material.Filled.Add" OnClick="ShowAddDialog">
                Add New Pig Pen
            </MudButton>
        </div>
    </div>

    <MudTable Items="@filteredPigPens" Hover="true" Striped="true" Loading="@loading">
        <HeaderContent>
            <MudTh>Customer</MudTh>
            <MudTh>Pen Code</MudTh>
            <MudTh>Quantity</MudTh>
            <MudTh>Start Date</MudTh>
            <MudTh>Est. Harvest</MudTh>
            <MudTh>Feed Cost</MudTh>
            <MudTh>Investment</MudTh>
            <MudTh>Profit/Loss</MudTh>
            <MudTh>Last Updated</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Customer">@GetCustomerName(context.CustomerId)</MudTd>
            <MudTd DataLabel="Pen Code">@context.PenCode</MudTd>
            <MudTd DataLabel="Quantity">@context.PigQty</MudTd>
            <MudTd DataLabel="Start Date">@context.StartDate.ToString("yyyy-MM-dd")</MudTd>
            <MudTd DataLabel="Est. Harvest">@(context.EstimatedHarvestDate?.ToString("yyyy-MM-dd") ?? "N/A")</MudTd>
            <MudTd DataLabel="Feed Cost">$@context.FeedCost.ToString("N2")</MudTd>
            <MudTd DataLabel="Investment">$@context.Investment.ToString("N2")</MudTd>
            <MudTd DataLabel="Profit/Loss">
                <MudText Color="@(context.ProfitLoss >= 0 ? Color.Success : Color.Error)">
                    $@context.ProfitLoss.ToString("N2")
                </MudText>
            </MudTd>
            <MudTd DataLabel="Last Updated">
                <MudText Typo="Typo.body2" Color="@(IsRecentlyUpdated(context.UpdatedAt) ? Color.Primary : Color.Secondary)">
                    @FormatRelativeTime(context.UpdatedAt)
                </MudText>
            </MudTd>
            <MudTd DataLabel="Actions">
                <MudButtonGroup Size="Size.Small" Variant="Variant.Text">
                    <MudButton Color="Color.Info" StartIcon="Icons.Material.Filled.CloudDownload"
                              OnClick="() => ShowPosImportDialog(context.Id, GetCustomerName(context.CustomerId), context.PenCode, GetCustomerCode(context.CustomerId))"
                              Title="Import POSPOS feeds for this pig pen">
                        POSPOS
                    </MudButton>
                    <MudButton Color="Color.Success" StartIcon="Icons.Material.Filled.Add"
                              OnClick="() => ShowAddFeedDialog(context.Id, GetCustomerName(context.CustomerId), context.PenCode)">
                        Add Feed
                    </MudButton>
                    <MudButton Color="Color.Primary" StartIcon="Icons.Material.Filled.Visibility"
                              OnClick="() => NavigateToPigPenDetail(context.Id)">
                        Details
                    </MudButton>
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private List<Customer> customers = new();
    private List<PigPen> pigPens = new();
    private List<PigPen> filteredPigPens = new();
    private bool loading = true;
    private Guid? selectedCustomerId = null;
    private string searchText = "";

    private Guid? SelectedCustomerId
    {
        get => selectedCustomerId;
        set
        {
            selectedCustomerId = value;
            FilterPigPens();
        }
    }

    private string SearchText
    {
        get => searchText;
        set
        {
            searchText = value;
            FilterPigPens();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            loading = true;

            var customersTask = CustomerService.GetCustomersAsync();
            var pigPensTask = PigPenService.GetPigPensAsync();

            await Task.WhenAll(customersTask, pigPensTask);

            customers = customersTask.Result;
            pigPens = pigPensTask.Result;

            FilterPigPens();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private void FilterPigPens()
    {
        filteredPigPens = pigPens.Where(p =>
            (selectedCustomerId == null || p.CustomerId == selectedCustomerId) &&
            (string.IsNullOrEmpty(searchText) || 
             p.PenCode.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             GetCustomerName(p.CustomerId).Contains(searchText, StringComparison.OrdinalIgnoreCase))
        ).OrderByDescending(p => p.UpdatedAt).ToList();
    }

    private string GetCustomerName(Guid customerId)
    {
        return customers.FirstOrDefault(c => c.Id == customerId)?.Name ?? "Unknown";
    }

    private async Task ShowAddDialog()
    {
        var dialog = await DialogService.ShowAsync<AddPigPenDialog>("Add New Pig Pen");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
            Snackbar.Add("Pig pen added successfully!", Severity.Success);
        }
    }

    private async Task ShowAddFeedDialog(Guid pigPenId, string customerName, string penCode)
    {
        var parameters = new DialogParameters<AddFeedDialog>
        {
            { x => x.PigPenId, pigPenId },
            { x => x.CustomerName, customerName },
            { x => x.PenCode, penCode }
        };

        var dialog = await DialogService.ShowAsync<AddFeedDialog>("Add Feed", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData(); // Refresh the list to show updated feed costs
            Snackbar.Add("Feed added successfully!", Severity.Success);
        }
    }

    private async Task ShowPosImportDialog(Guid pigPenId, string customerName, string penCode, string customerCode)
    {
        var parameters = new DialogParameters
        {
            { "PigPenId", pigPenId },
            { "CustomerName", customerName },
            { "PenCode", penCode },
            { "CustomerCode", customerCode }
        };

        var dialog = await DialogService.ShowAsync<PigPenPosImportDialog>("Import POSPOS Feed Data", parameters, new DialogOptions 
        { 
            MaxWidth = MaxWidth.Large,
            FullWidth = true 
        });
        
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData(); // Refresh the list after import
            Snackbar.Add("POSPOS feed import completed!", Severity.Success);
        }
    }

    private string GetCustomerCode(Guid customerId)
    {
        var customer = customers.FirstOrDefault(c => c.Id == customerId);
        return customer?.Code ?? "";
    }

    private async Task ShowFeedImportDialog()
    {
        // This is the old general import - we can remove this or keep for bulk imports
        Snackbar.Add("Use the inline POSPOS import buttons for each pig pen instead", Severity.Info);
    }

    private void NavigateToPigPenDetail(Guid pigPenId)
    {
        // This would navigate to pig pen detail page
        // For now, we'll just show a snackbar
        Snackbar.Add($"Navigate to pig pen detail: {pigPenId}", Severity.Info);
    }

    private bool IsRecentlyUpdated(DateTime updatedAt)
    {
        return DateTime.UtcNow.Subtract(updatedAt).TotalHours < 24;
    }

    private string FormatRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow.Subtract(dateTime);
        
        if (timeSpan.TotalMinutes < 1)
            return "Just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes} min ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours} hour{((int)timeSpan.TotalHours == 1 ? "" : "s")} ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays} day{((int)timeSpan.TotalDays == 1 ? "" : "s")} ago";
        
        return dateTime.ToString("MMM dd, yyyy");
    }
}
