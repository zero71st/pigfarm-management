@page "/pigpens"
@using System.Linq
@using PigFarmManagement.Client.Features.PigPens.Components
@inject ICustomerService CustomerService
@inject IPigPenService PigPenService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<PageTitle>PIG PEN MANAGEMENT - Pig Pens</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="true">Pig Pen Management</MudText>

<!-- Filter and Search Section -->
<MudPaper Class="pa-4 ma-2" Elevation="2">
    <MudGrid>
        <MudItem xs="12" md="4">
            <MudSelect T="Guid?" @bind-Value="SelectedCustomerId" Label="Filter Customer" Variant="Variant.Outlined">
                <MudSelectItem T="Guid?" Value="@((Guid?)null)">All Customers</MudSelectItem>
                @foreach (var customer in customers)
                {
                    <MudSelectItem T="Guid?" Value="@((Guid?)customer.Id)">                @customer.Name (@customer.Status)</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudSelect T="PigPenType?" @bind-Value="SelectedPigPenType" Label="Filter Type" Variant="Variant.Outlined">
                <MudSelectItem T="PigPenType?" Value="@((PigPenType?)null)">All Types</MudSelectItem>
                <MudSelectItem T="PigPenType?" Value="PigPenType.Cash">Cash</MudSelectItem>
                <MudSelectItem T="PigPenType?" Value="PigPenType.Project">Project</MudSelectItem>
            </MudSelect>
        </MudItem>
        <MudItem xs="12" md="4">
            <MudTextField @bind-Value="SearchText" Label="Search" Variant="Variant.Outlined" 
                         Adornment="Adornment.End" AdornmentIcon="Icons.Material.Filled.Search" />
        </MudItem>
    </MudGrid>
</MudPaper>

<!-- Pig Pen Management Section -->
<MudPaper Class="pa-4 ma-2" Elevation="2">
    <div class="d-flex justify-space-between align-center mb-4">
        <MudText Typo="Typo.h6">Pig Pen List</MudText>
        <div class="d-flex gap-2">
            <MudButton Variant="Variant.Outlined" 
                       Color="Color.Info"
                       StartIcon="Icons.Material.Filled.Refresh"
                       OnClick="RefreshData"
                       Size="Size.Small">
                Refresh
            </MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                       StartIcon="Icons.Material.Filled.Add" OnClick="ShowAddDialog">
                Add New Pig Pen
            </MudButton>
        </div>
    </div>

    <MudTable Items="@filteredPigPens" Hover="true" Striped="true" Loading="@loading">
        <HeaderContent>
            <MudTh>Customer</MudTh>
            <MudTh>Pen Code</MudTh>
            <MudTh>Type</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Quantity</MudTh>
            <MudTh>Register Date</MudTh>
            <MudTh>Est. Harvest</MudTh>
            <MudTh>Days Remaining</MudTh>
            <MudTh>Last Updated</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Customer">@GetCustomerName(context.CustomerId)</MudTd>
            <MudTd DataLabel="Pen Code">@context.PenCode</MudTd>
            <MudTd DataLabel="Type">
                <MudChip Color="@(context.Type == PigPenType.Cash ? Color.Success : Color.Info)" 
                         Size="Size.Small" Variant="Variant.Filled">
                    @context.Type
                </MudChip>
            </MudTd>
            <MudTd DataLabel="Status">
                @if (context.ActHarvestDate.HasValue)
                {
                    <MudChip Color="Color.Error" 
                             Size="Size.Small" 
                             Variant="Variant.Filled"
                             Icon="Icons.Material.Filled.Cancel">
                        Closed
                    </MudChip>
                }
                else if (context.IsCalculationLocked)
                {
                    <MudChip Color="Color.Warning" 
                             Size="Size.Small" 
                             Variant="Variant.Filled"
                             Icon="Icons.Material.Filled.Lock">
                        Locked
                    </MudChip>
                }
                else
                {
                    <MudChip Color="Color.Success" 
                             Size="Size.Small" 
                             Variant="Variant.Filled"
                             Icon="Icons.Material.Filled.CheckCircle">
                        Active
                    </MudChip>
                }
            </MudTd>
            <MudTd DataLabel="Quantity">@context.PigQty</MudTd>
            <MudTd DataLabel="Register Date">@context.RegisterDate.ToString("yyyy-MM-dd")</MudTd>
            <MudTd DataLabel="Est. Harvest">@(context.EstimatedHarvestDate?.ToString("yyyy-MM-dd") ?? "N/A")</MudTd>
            <MudTd DataLabel="Days Remaining">
                @if (context.EstimatedHarvestDate.HasValue)
                {
                    var daysRemaining = (context.EstimatedHarvestDate.Value - DateTime.Now).Days;
                    <MudText Color="@(daysRemaining > 30 ? Color.Success : daysRemaining > 7 ? Color.Warning : Color.Error)">
                        @daysRemaining days
                    </MudText>
                }
                else
                {
                    <MudText Color="Color.Secondary">N/A</MudText>
                }
            </MudTd>
            <MudTd DataLabel="Last Updated">
                <MudText Typo="Typo.body2" Color="@(IsRecentlyUpdated(context.UpdatedAt) ? Color.Primary : Color.Secondary)">
                    @FormatRelativeTime(context.UpdatedAt)
                </MudText>
            </MudTd>
            <MudTd DataLabel="Actions">
                <div class="d-flex gap-1">
                    <MudButton Size="Size.Small"
                              Variant="Variant.Text"
                              Color="Color.Info"
                              Class="pa-1"
                              Style="min-width: 32px; font-size: 16px; line-height: 1;"
                              OnClick="() => ShowPosImportDialog(context.Id, GetCustomerName(context.CustomerId), context.PenCode, GetCustomerCode(context.CustomerId))"
                              Title="Import feeds">
                        üì•
                    </MudButton>
                    <MudButton Size="Size.Small"
                              Variant="Variant.Text"
                              Color="Color.Primary"
                              Class="pa-1"
                              Style="min-width: 32px; font-size: 16px; line-height: 1;"
                              OnClick="() => NavigateToPigPenDetail(context.Id)"
                              Title="View details">
                        üëÅÔ∏è
                    </MudButton>
                    <MudButton Size="Size.Small"
                              Variant="Variant.Text"
                              Color="Color.Warning"
                              Class="pa-1"
                              Style="min-width: 32px; font-size: 16px; line-height: 1;"
                              OnClick="() => ShowEditDialog(context)"
                              Disabled="@IsPigPenClosed(context)"
                              Title="Edit">
                        ‚úèÔ∏è
                    </MudButton>
                    <MudButton Size="Size.Small"
                              Variant="Variant.Text"
                              Color="Color.Error"
                              Class="pa-1"
                              Style="min-width: 32px; font-size: 16px; line-height: 1;"
                              OnClick="() => ShowDeleteDialog(context)"
                              Title="Delete">
                        üóëÔ∏è
                    </MudButton>
                </div>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    private List<Customer> customers = new();
    private List<PigPen> pigPens = new();
    private List<PigPen> filteredPigPens = new();
    private bool loading = true;
    private Guid? selectedCustomerId = null;
    private PigPenType? selectedPigPenType = null;
    private string searchText = "";
    private DateTime lastRefreshTime = DateTime.MinValue;

    private Guid? SelectedCustomerId
    {
        get => selectedCustomerId;
        set
        {
            selectedCustomerId = value;
            FilterPigPens();
        }
    }

    private PigPenType? SelectedPigPenType
    {
        get => selectedPigPenType;
        set
        {
            selectedPigPenType = value;
            FilterPigPens();
        }
    }

    private string SearchText
    {
        get => searchText;
        set
        {
            searchText = value;
            FilterPigPens();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            // Auto-refresh data if it's been more than 30 seconds since last refresh
            // This helps when navigating back from detail pages after operations
            if ((DateTime.Now - lastRefreshTime).TotalSeconds > 30)
            {
                await LoadData();
            }
        }
    }

    private async Task LoadData()
    {
        try
        {
            loading = true;

            var customersTask = CustomerService.GetCustomersAsync();
            var pigPensTask = PigPenService.GetPigPensAsync();

            await Task.WhenAll(customersTask, pigPensTask);

            customers = customersTask.Result;
            pigPens = pigPensTask.Result;

            FilterPigPens();
            lastRefreshTime = DateTime.Now;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading data: {ex.Message}", Severity.Error);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task RefreshData()
    {
        await LoadData();
        Snackbar.Add("Data refreshed successfully", Severity.Info);
    }

    private void FilterPigPens()
    {
        filteredPigPens = pigPens.Where(p =>
            (selectedCustomerId == null || p.CustomerId == selectedCustomerId) &&
            (selectedPigPenType == null || p.Type == selectedPigPenType) &&
            (string.IsNullOrEmpty(searchText) || 
             p.PenCode.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
             GetCustomerName(p.CustomerId).Contains(searchText, StringComparison.OrdinalIgnoreCase))
        ).OrderByDescending(p => p.UpdatedAt).ToList();
    }

    private string GetCustomerName(Guid customerId)
    {
        return customers.FirstOrDefault(c => c.Id == customerId)?.Name ?? "Unknown";
    }

    private async Task ShowAddDialog()
    {
        var dialog = await DialogService.ShowAsync<AddPigPenDialog>("Add New Pig Pen");
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
            Snackbar.Add("Pig pen added successfully!", Severity.Success);
        }
    }

    private async Task ShowPosImportDialog(Guid pigPenId, string customerName, string penCode, string customerCode)
    {
        var parameters = new DialogParameters
        {
            { "PigPenId", pigPenId },
            { "CustomerName", customerName },
            { "PenCode", penCode },
            { "CustomerCode", customerCode }
        };

        var dialog = await DialogService.ShowAsync<PigPenPosImportDialog>("Import POSPOS Feed Data", parameters, new DialogOptions 
        { 
            MaxWidth = MaxWidth.Large,
            FullWidth = true 
        });
        
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData(); // Refresh the list after import
            Snackbar.Add("POSPOS feed import completed!", Severity.Success);
        }
    }

    private string GetCustomerCode(Guid customerId)
    {
        var customer = customers.FirstOrDefault(c => c.Id == customerId);
        return customer?.Code ?? "";
    }

    private void NavigateToPigPenDetail(Guid pigPenId)
    {
        NavigationManager.NavigateTo($"/pigpens/{pigPenId}/detail");
    }

    private bool IsRecentlyUpdated(DateTime updatedAt)
    {
        return DateTime.UtcNow.Subtract(updatedAt).TotalHours < 24;
    }

    private string FormatRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.UtcNow.Subtract(dateTime);
        
        if (timeSpan.TotalMinutes < 1)
            return "Just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes} min ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours} hour{((int)timeSpan.TotalHours == 1 ? "" : "s")} ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays} day{((int)timeSpan.TotalDays == 1 ? "" : "s")} ago";
        
        return dateTime.ToString("MMM dd, yyyy");
    }

    private async Task ShowEditDialog(PigPen pigPen)
    {
        // Prevent editing if pig pen is closed
        if (IsPigPenClosed(pigPen))
        {
            Snackbar.Add("Cannot edit a closed pig pen", Severity.Warning);
            return;
        }

        var parameters = new DialogParameters<EditPigPenDialog>
        {
            { x => x.PigPen, pigPen }
        };

        var dialog = await DialogService.ShowAsync<EditPigPenDialog>("Edit Pig Pen", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadData();
            Snackbar.Add("Pig pen updated successfully!", Severity.Success);
        }
    }

    private async Task ShowDeleteDialog(PigPen pigPen)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Are you sure you want to delete pig pen '{pigPen.PenCode}'? This action cannot be undone." }
        };

        var dialog = await DialogService.ShowAsync<DeleteConfirmationDialog>("Delete Pig Pen", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                var success = await PigPenService.DeletePigPenAsync(pigPen.Id);
                if (success)
                {
                    await LoadData();
                    Snackbar.Add("Pig pen deleted successfully!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Failed to delete pig pen.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting pig pen: {ex.Message}", Severity.Error);
            }
        }
    }

    private bool IsPigPenClosed(PigPen pigPen)
    {
        if (pigPen == null) return false;
        
        // A pig pen is considered closed if:
        // 1. It has an actual harvest date (harvested)
        // 2. Calculations are locked
        return pigPen.ActHarvestDate.HasValue || pigPen.IsCalculationLocked;
    }
}
