@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components
@using MudBlazor
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

@if (showContent)
{
    @ChildContent
}
else if (isLoading)
{
    <div class="d-flex justify-center align-center" style="height: 50vh;">
        <MudProgressCircular Indeterminate="true" />
    </div>
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? RequiredRole { get; set; }
    [Parameter] public bool RequireAuthentication { get; set; } = true;
    [Parameter] public string RedirectTo { get; set; } = "/login";
    [Parameter] public string AccessDeniedPage { get; set; } = "/access-denied";

    private bool showContent = false;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Check if authentication is required
        if (RequireAuthentication && !user.Identity!.IsAuthenticated)
        {
            // Redirect to login page
            Navigation.NavigateTo(RedirectTo);
            return;
        }

        // Check if specific role is required
        if (!string.IsNullOrEmpty(RequiredRole) && user.Identity!.IsAuthenticated)
        {
            if (!user.IsInRole(RequiredRole))
            {
                // Redirect to access denied page
                Navigation.NavigateTo(AccessDeniedPage);
                return;
            }
        }

        // User has access
        showContent = true;
        isLoading = false;
        StateHasChanged();
    }
}