@using PigFarmManagement.Shared.Models
@inject IFeedImportService FeedImportService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <div class="pa-4">
            <MudText Typo="Typo.h6" Class="mb-4">Import Feed Data from POSPOS</MudText>
            
            <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
                <!-- Mock Data Import tab removed. Use Date Range or JSON Import for live data. -->
                
                <MudTabPanel Text="Date Range Import" Icon="@Icons.Material.Filled.DateRange">
                    <div class="d-flex flex-column gap-4">
                        <MudText Typo="Typo.body1" Class="mb-3">
                            Import POSPOS feed transactions from a specific date range.
                        </MudText>
                        
                        <div class="d-flex gap-4">
                            <MudDatePicker @bind-Date="_fromDate"
                                         Label="From Date"
                                         Variant="Variant.Outlined"
                                         DateFormat="yyyy-MM-dd"
                                         HelperText="Start date for importing transactions" />
                            
                            <MudDatePicker @bind-Date="_toDate"
                                         Label="To Date"
                                         Variant="Variant.Outlined"
                                         DateFormat="yyyy-MM-dd"
                                         HelperText="End date for importing transactions" />
                        </div>
                        
                        @if (_dateRangeTransactions.Any())
                        {
                            <MudCard>
                                <MudCardContent>
                                    <MudText Typo="Typo.h6" Class="mb-2">Preview Date Range Data</MudText>
                                    <MudText Typo="Typo.body2" Class="mb-2">
                                        Found @_dateRangeTransactions.Count transaction(s) with @_dateRangeTransactions.Sum(t => t.OrderList.Count) feed items
                                        from @(_fromDate?.ToString("yyyy-MM-dd")) to @(_toDate?.ToString("yyyy-MM-dd"))
                                    </MudText>
                                    
                                    @foreach (var transaction in _dateRangeTransactions.Take(3))
                                    {
                                        <MudChip Color="Color.Primary" Size="Size.Small" Class="mr-2 mb-1">
                                            @transaction.Code - @transaction.BuyerDetail.FirstName @transaction.BuyerDetail.LastName
                                            (@transaction.Timestamp.ToString("MM/dd HH:mm"))
                                        </MudChip>
                                    }
                                    
                                    @if (_dateRangeTransactions.Count > 3)
                                    {
                                        <MudChip Color="Color.Secondary" Size="Size.Small" Variant="Variant.Outlined">
                                            +@(_dateRangeTransactions.Count - 3) more...
                                        </MudChip>
                                    }
                                </MudCardContent>
                            </MudCard>
                        }
                        
                        <div class="d-flex gap-2">
                            <MudButton Color="Color.Info" 
                                     Variant="Variant.Filled" 
                                     StartIcon="@Icons.Material.Filled.Search"
                                     OnClick="LoadDateRangeData"
                                     Disabled="_isLoading || !_fromDate.HasValue || !_toDate.HasValue">
                                @if (_isLoading)
                                {
                                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                    <span class="ml-2">Searching...</span>
                                }
                                else
                                {
                                    <span>Search Transactions</span>
                                }
                            </MudButton>
                            
                            @if (_dateRangeTransactions.Any())
                            {
                                <MudButton Color="Color.Success" 
                                         Variant="Variant.Filled" 
                                         StartIcon="@Icons.Material.Filled.Upload"
                                         OnClick="ImportDateRangeData"
                                         Disabled="_isImporting">
                                    @if (_isImporting)
                                    {
                                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                        <span class="ml-2">Importing...</span>
                                    }
                                    else
                                    {
                                        <span>Import Selected Range</span>
                                    }
                                </MudButton>
                            }
                        </div>
                    </div>
                </MudTabPanel>
                
                <MudTabPanel Text="JSON Import" Icon="@Icons.Material.Filled.Code">
                    <div class="d-flex flex-column gap-4">
                        <MudText Typo="Typo.body1" Class="mb-3">
                            Paste POSPOS JSON transaction data below to import feed records.
                        </MudText>
                        
                        <MudTextField @bind-Value="_jsonContent"
                                    Label="POSPOS JSON Data"
                                    Variant="Variant.Outlined"
                                    Lines="12"
                                    Placeholder="Paste your POSPOS transaction JSON here..."
                                    HelperText="Expected format: Array of transaction objects with order_list, buyer_detail, etc." />
                        
                        <MudButton Color="Color.Primary" 
                                 Variant="Variant.Filled" 
                                 StartIcon="@Icons.Material.Filled.Upload"
                                 OnClick="ImportFromJson"
                                 Disabled="_isImporting || string.IsNullOrWhiteSpace(_jsonContent)">
                            @if (_isImporting)
                            {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                                <span class="ml-2">Importing...</span>
                            }
                            else
                            {
                                <span>Import JSON Data</span>
                            }
                        </MudButton>
                    </div>
                </MudTabPanel>
            </MudTabs>
            
            @if (_importResult != null)
            {
                <MudAlert Severity="@(_importResult.FailedImports > 0 ? Severity.Warning : Severity.Success)" Class="mt-4">
                    <MudText Typo="Typo.h6" Class="mb-2">Import Results</MudText>
                    <MudText Typo="Typo.body2">
                        • Total Transactions: @_importResult.TotalTransactions<br/>
                        • Total Feed Items: @_importResult.TotalFeedItems<br/>
                        • Successful Imports: @_importResult.SuccessfulImports<br/>
                        • Failed Imports: @_importResult.FailedImports
                    </MudText>
                    
                    @if (_importResult.Errors.Any())
                    {
                        <MudText Typo="Typo.body2" Class="mt-2">
                            <strong>Errors:</strong><br/>
                            @foreach (var error in _importResult.Errors)
                            {
                                <span>• @error<br/></span>
                            }
                        </MudText>
                    }
                    
                    @if (_importResult.ImportedFeeds.Any())
                    {
                        <MudText Typo="Typo.body2" Class="mt-2">
                            <strong>Imported Feeds:</strong><br/>
                            @foreach (var feed in _importResult.ImportedFeeds.Take(5))
                            {
                                <span>• @feed.InvoiceCode - @feed.CustomerName (@feed.FeedItemsCount items, $@feed.TotalAmount.ToString("F2"))<br/></span>
                            }
                            @if (_importResult.ImportedFeeds.Count > 5)
                            {
                                <span>• And @(_importResult.ImportedFeeds.Count - 5) more...</span>
                            }
                        </MudText>
                    }
                </MudAlert>
            }
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;

    private bool _isLoading;
    private bool _isImporting;
    private string _jsonContent = "";
    private List<PosPosFeedTransaction> _dateRangeTransactions = new();
    private FeedImportResult? _importResult;
    private DateTime? _fromDate = DateTime.Today.AddDays(-7); // Default to last 7 days
    private DateTime? _toDate = DateTime.Today;

    protected override Task OnInitializedAsync()
    {
        // No mock data to load on init. User can use Date Range or JSON import flows.
        return Task.CompletedTask;
    }

    // Mock-specific methods removed. Use date-range or JSON import instead.

    private async Task ImportFromJson()
    {
        _isImporting = true;
        try
        {
            _importResult = await FeedImportService.ImportFromJsonAsync(_jsonContent);
            
            if (_importResult.FailedImports == 0)
            {
                Snackbar.Add($"Successfully imported {_importResult.SuccessfulImports} transactions with {_importResult.TotalFeedItems} feed items", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Import completed with {_importResult.FailedImports} failures", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Import failed: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isImporting = false;
        }
    }

    private async Task LoadDateRangeData()
    {
        if (!_fromDate.HasValue || !_toDate.HasValue)
        {
            Snackbar.Add("Please select both from and to dates", Severity.Warning);
            return;
        }

        if (_fromDate.Value > _toDate.Value)
        {
            Snackbar.Add("From date cannot be later than to date", Severity.Warning);
            return;
        }

        _isLoading = true;
        try
        {
            _dateRangeTransactions = await FeedImportService.GetPosPosFeedByDateRangeAsync(_fromDate.Value, _toDate.Value);
            Snackbar.Add($"Found {_dateRangeTransactions.Count} transactions in the selected date range", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load date range data: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task ImportDateRangeData()
    {
        if (!_fromDate.HasValue || !_toDate.HasValue)
        {
            Snackbar.Add("Please select both from and to dates", Severity.Warning);
            return;
        }

        _isImporting = true;
        try
        {
            _importResult = await FeedImportService.ImportPosPosFeedByDateRangeAsync(_fromDate.Value, _toDate.Value);
            
            if (_importResult.FailedImports == 0)
            {
                Snackbar.Add($"Successfully imported {_importResult.SuccessfulImports} transactions with {_importResult.TotalFeedItems} feed items from date range", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Import completed with {_importResult.FailedImports} failures", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Import failed: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isImporting = false;
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
