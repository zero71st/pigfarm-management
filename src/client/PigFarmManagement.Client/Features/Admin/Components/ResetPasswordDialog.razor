@using PigFarmManagement.Shared.Contracts.Authentication
@using System.ComponentModel.DataAnnotations
@inject IAdminUserService AdminUserService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <MudContainer Class="pa-0">
            <MudAlert Severity="Severity.Warning" Class="mb-4">
                <MudText Typo="Typo.subtitle2"><strong>Reset Password for @User.Username</strong></MudText>
                <MudText Typo="Typo.body2">This will generate a new temporary password for the user.</MudText>
            </MudAlert>

            <MudForm @ref="form" Model="@resetPasswordRequest" Validation="@(new DataAnnotationsValidator())">
                <MudGrid>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="resetPasswordRequest.NewPassword"
                                     Label="New Password"
                                     Required="true"
                                     Variant="Variant.Outlined"
                                     For="@(() => resetPasswordRequest.NewPassword)"
                                     InputType="@(showPassword ? InputType.Text : InputType.Password)"
                                     Adornment="Adornment.End"
                                     AdornmentIcon="@(showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                     OnAdornmentClick="@(() => showPassword = !showPassword)"
                                     HelperText="Minimum 6 characters" />
                    </MudItem>
                    
                    <MudItem xs="12">
                        <MudTextField @bind-Value="confirmPassword"
                                     Label="Confirm New Password"
                                     Required="true"
                                     Variant="Variant.Outlined"
                                     InputType="@(showPassword ? InputType.Text : InputType.Password)"
                                     Error="@(!string.IsNullOrEmpty(confirmPassword) && confirmPassword != resetPasswordRequest.NewPassword)"
                                     ErrorText="Passwords do not match"
                                     HelperText="Re-enter the new password" />
                    </MudItem>
                    
                    <MudItem xs="12">
                        <MudCheckBox @bind-Checked="forcePasswordChange" 
                                    Label="Force user to change password on next login" 
                                    Color="Color.Primary" />
                    </MudItem>
                </MudGrid>
            </MudForm>

            @if (passwordResetSuccess)
            {
                <MudAlert Severity="Severity.Success" Class="mt-4">
                    <MudText Typo="Typo.subtitle2"><strong>Password Reset Successfully</strong></MudText>
                    <MudText Typo="Typo.body2">The user can now log in with the new password.</MudText>
                </MudAlert>
            }
        </MudContainer>
    </DialogContent>
    
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Warning" 
                   Variant="Variant.Filled" 
                   OnClick="Submit"
                   Disabled="@(!CanSubmit())"
                   Class="ml-2">
            @if (isSubmitting)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
            }
            Reset Password
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public UserInfo User { get; set; } = null!;
    
    private MudForm form = null!;
    private ResetPasswordRequest resetPasswordRequest = new();
    private string confirmPassword = "";
    private bool showPassword = false;
    private bool isSubmitting = false;
    private bool forcePasswordChange = true;
    private bool passwordResetSuccess = false;
    
    protected override void OnInitialized()
    {
        resetPasswordRequest = new ResetPasswordRequest
        {
            NewPassword = GenerateTemporaryPassword()
        };
        confirmPassword = resetPasswordRequest.NewPassword;
    }
    
    private string GenerateTemporaryPassword()
    {
        // Generate a random 12-character password
        var chars = "ABCDEFGHJKLMNOPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz0123456789!@#$%";
        var random = new Random();
        return new string(Enumerable.Repeat(chars, 12).Select(s => s[random.Next(s.Length)]).ToArray());
    }
    
    private bool CanSubmit()
    {
        return !isSubmitting && 
               !passwordResetSuccess &&
               !string.IsNullOrWhiteSpace(resetPasswordRequest.NewPassword) &&
               resetPasswordRequest.NewPassword.Length >= 6 &&
               confirmPassword == resetPasswordRequest.NewPassword;
    }
    
    private void Cancel()
    {
        MudDialog.Cancel();
    }
    
    private async Task Submit()
    {
        if (!CanSubmit()) return;
        
        isSubmitting = true;
        
        try
        {
            var response = await AdminUserService.ResetPasswordAsync(User.Id, resetPasswordRequest);
            
            if (response.IsSuccess)
            {
                passwordResetSuccess = true;
                Snackbar.Add($"Password reset successfully for user '{User.Username}'", Severity.Success);
                
                // Auto-close after 3 seconds
                _ = Task.Delay(3000).ContinueWith(_ => MudDialog.Close(DialogResult.Ok(true)));
            }
            else
            {
                Snackbar.Add($"Error resetting password: {response.ErrorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error resetting password: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }
}